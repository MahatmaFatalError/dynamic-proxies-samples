# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0,00% complete, ETA 00:18:00
# Fork: 1 of 3
# Warmup Iteration   1: 3,846 ns/op
# Warmup Iteration   2: 3,494 ns/op
# Warmup Iteration   3: 3,208 ns/op
# Warmup Iteration   4: 3,187 ns/op
# Warmup Iteration   5: 3,195 ns/op
Iteration   1: 3,308 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,253 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,363 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,222 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,319 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,369 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,216 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,225 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,294 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,342 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 4,17% complete, ETA 00:20:20
# Fork: 2 of 3
# Warmup Iteration   1: 3,931 ns/op
# Warmup Iteration   2: 3,493 ns/op
# Warmup Iteration   3: 3,298 ns/op
# Warmup Iteration   4: 3,263 ns/op
# Warmup Iteration   5: 3,247 ns/op
Iteration   1: 3,253 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,260 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,278 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,264 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,260 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,249 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,240 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,359 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,245 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,260 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 8,33% complete, ETA 00:19:24
# Fork: 3 of 3
# Warmup Iteration   1: 3,925 ns/op
# Warmup Iteration   2: 3,507 ns/op
# Warmup Iteration   3: 3,265 ns/op
# Warmup Iteration   4: 3,259 ns/op
# Warmup Iteration   5: 3,252 ns/op
Iteration   1: 3,256 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,266 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,247 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,253 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,262 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,253 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,253 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,246 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,253 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,244 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  3,270 ±(99.9%) 0,028 ns/op [Average]
  (min, avg, max) = (3,216, 3,270, 3,369), stdev = 0,041
  CI (99.9%): [3,243, 3,298] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12,50% complete, ETA 00:18:30
# Fork: 1 of 3
# Warmup Iteration   1: 2,475 ns/op
# Warmup Iteration   2: 2,471 ns/op
# Warmup Iteration   3: 1,950 ns/op
# Warmup Iteration   4: 1,952 ns/op
# Warmup Iteration   5: 1,951 ns/op
Iteration   1: 1,952 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1,954 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1,951 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1,948 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1,952 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1,957 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1,960 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1,948 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1,947 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1,952 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 16,67% complete, ETA 00:17:38
# Fork: 2 of 3
# Warmup Iteration   1: 2,469 ns/op
# Warmup Iteration   2: 2,474 ns/op
# Warmup Iteration   3: 1,952 ns/op
# Warmup Iteration   4: 1,960 ns/op
# Warmup Iteration   5: 1,940 ns/op
Iteration   1: 1,960 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1,959 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1,956 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1,965 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1,957 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1,960 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1,959 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1,959 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1,962 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1,964 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 20,83% complete, ETA 00:16:45
# Fork: 3 of 3
# Warmup Iteration   1: 2,476 ns/op
# Warmup Iteration   2: 2,468 ns/op
# Warmup Iteration   3: 1,970 ns/op
# Warmup Iteration   4: 1,955 ns/op
# Warmup Iteration   5: 1,959 ns/op
Iteration   1: 1,957 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1,962 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1,951 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1,945 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1,955 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1,959 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1,956 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1,967 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1,960 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1,973 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁷ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  1,957 ±(99.9%) 0,004 ns/op [Average]
  (min, avg, max) = (1,945, 1,957, 1,973), stdev = 0,006
  CI (99.9%): [1,953, 1,961] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁷ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25,00% complete, ETA 00:15:52
# Fork: 1 of 3
# Warmup Iteration   1: 4,436 ns/op
# Warmup Iteration   2: 5,830 ns/op
# Warmup Iteration   3: 4,473 ns/op
# Warmup Iteration   4: 4,478 ns/op
# Warmup Iteration   5: 4,447 ns/op
Iteration   1: 4,479 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,475 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,462 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4,479 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 4,420 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 4,485 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4,426 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 4,450 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 4,426 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 4,457 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 29,17% complete, ETA 00:14:59
# Fork: 2 of 3
# Warmup Iteration   1: 4,494 ns/op
# Warmup Iteration   2: 5,730 ns/op
# Warmup Iteration   3: 4,483 ns/op
# Warmup Iteration   4: 4,433 ns/op
# Warmup Iteration   5: 4,499 ns/op
Iteration   1: 4,443 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,494 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,434 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4,472 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 4,543 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 4,504 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4,431 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 4,495 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 4,420 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 4,464 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 33,33% complete, ETA 00:14:06
# Fork: 3 of 3
# Warmup Iteration   1: 4,527 ns/op
# Warmup Iteration   2: 5,730 ns/op
# Warmup Iteration   3: 4,462 ns/op
# Warmup Iteration   4: 4,446 ns/op
# Warmup Iteration   5: 4,462 ns/op
Iteration   1: 4,404 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,441 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,477 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4,442 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 4,435 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 4,460 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4,458 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 4,465 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 4,495 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 4,488 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  4,461 ±(99.9%) 0,020 ns/op [Average]
  (min, avg, max) = (4,404, 4,461, 4,543), stdev = 0,031
  CI (99.9%): [4,440, 4,481] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37,50% complete, ETA 00:13:13
# Fork: 1 of 3
# Warmup Iteration   1: 3,986 ns/op
# Warmup Iteration   2: 3,859 ns/op
# Warmup Iteration   3: 3,736 ns/op
# Warmup Iteration   4: 3,791 ns/op
# Warmup Iteration   5: 3,732 ns/op
Iteration   1: 3,710 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,755 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,741 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,756 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,698 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,702 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,698 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,716 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,703 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,703 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 41,67% complete, ETA 00:12:21
# Fork: 2 of 3
# Warmup Iteration   1: 3,996 ns/op
# Warmup Iteration   2: 3,883 ns/op
# Warmup Iteration   3: 3,710 ns/op
# Warmup Iteration   4: 3,711 ns/op
# Warmup Iteration   5: 3,699 ns/op
Iteration   1: 3,704 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,713 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,709 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,723 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,698 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,749 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,748 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,740 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,717 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,763 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 45,83% complete, ETA 00:11:28
# Fork: 3 of 3
# Warmup Iteration   1: 4,014 ns/op
# Warmup Iteration   2: 3,880 ns/op
# Warmup Iteration   3: 3,701 ns/op
# Warmup Iteration   4: 3,701 ns/op
# Warmup Iteration   5: 3,720 ns/op
Iteration   1: 3,708 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,705 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,720 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,719 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,727 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,739 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,700 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,777 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,755 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,777 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  3,726 ±(99.9%) 0,016 ns/op [Average]
  (min, avg, max) = (3,698, 3,726, 3,777), stdev = 0,025
  CI (99.9%): [3,709, 3,742] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50,00% complete, ETA 00:10:35
# Fork: 1 of 3
# Warmup Iteration   1: 5,149 ns/op
# Warmup Iteration   2: 5,138 ns/op
# Warmup Iteration   3: 5,340 ns/op
# Warmup Iteration   4: 5,390 ns/op
# Warmup Iteration   5: 5,373 ns/op
Iteration   1: 5,342 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5,333 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5,280 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5,383 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5,320 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5,387 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5,310 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5,313 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5,309 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5,350 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 54,17% complete, ETA 00:09:42
# Fork: 2 of 3
# Warmup Iteration   1: 5,446 ns/op
# Warmup Iteration   2: 5,421 ns/op
# Warmup Iteration   3: 5,401 ns/op
# Warmup Iteration   4: 5,271 ns/op
# Warmup Iteration   5: 5,166 ns/op
Iteration   1: 5,167 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5,162 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5,184 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5,203 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5,140 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5,205 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5,160 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5,201 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5,152 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5,162 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 58,33% complete, ETA 00:08:49
# Fork: 3 of 3
# Warmup Iteration   1: 5,147 ns/op
# Warmup Iteration   2: 5,214 ns/op
# Warmup Iteration   3: 5,144 ns/op
# Warmup Iteration   4: 5,173 ns/op
# Warmup Iteration   5: 5,312 ns/op
Iteration   1: 5,258 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5,146 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5,183 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5,206 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5,179 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5,153 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5,183 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5,179 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5,182 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5,184 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  5,231 ±(99.9%) 0,053 ns/op [Average]
  (min, avg, max) = (5,140, 5,231, 5,387), stdev = 0,079
  CI (99.9%): [5,178, 5,283] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62,50% complete, ETA 00:07:56
# Fork: 1 of 3
# Warmup Iteration   1: 4,530 ns/op
# Warmup Iteration   2: 8,325 ns/op
# Warmup Iteration   3: 6,763 ns/op
# Warmup Iteration   4: 7,191 ns/op
# Warmup Iteration   5: 7,295 ns/op
Iteration   1: 7,276 ns/op
                 ·gc.alloc.rate:                   2692,091 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2706,936 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,139 B/op
                 ·gc.churn.PS_Survivor_Space:      0,098 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        113,000 counts
                 ·gc.time:                         26,000 ms

Iteration   2: 7,266 ns/op
                 ·gc.alloc.rate:                   2696,153 MB/sec
                 ·gc.alloc.rate.norm:              24,007 B/op
                 ·gc.churn.PS_Eden_Space:          2690,843 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,960 B/op
                 ·gc.churn.PS_Survivor_Space:      0,240 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 7,213 ns/op
                 ·gc.alloc.rate:                   2716,283 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2720,622 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,045 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        112,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 7,314 ns/op
                 ·gc.alloc.rate:                   2677,099 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2676,859 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,004 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        112,000 counts
                 ·gc.time:                         25,000 ms

Iteration   5: 7,212 ns/op
                 ·gc.alloc.rate:                   2717,385 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2698,801 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,842 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 7,314 ns/op
                 ·gc.alloc.rate:                   2681,913 MB/sec
                 ·gc.alloc.rate.norm:              24,007 B/op
                 ·gc.churn.PS_Eden_Space:          2697,123 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,143 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        126,000 counts
                 ·gc.time:                         28,000 ms

Iteration   7: 7,217 ns/op
                 ·gc.alloc.rate:                   2712,500 MB/sec
                 ·gc.alloc.rate.norm:              24,007 B/op
                 ·gc.churn.PS_Eden_Space:          2717,000 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,046 B/op
                 ·gc.churn.PS_Survivor_Space:      0,080 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 7,314 ns/op
                 ·gc.alloc.rate:                   2682,358 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2678,030 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,968 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 7,267 ns/op
                 ·gc.alloc.rate:                   2696,657 MB/sec
                 ·gc.alloc.rate.norm:              24,007 B/op
                 ·gc.churn.PS_Eden_Space:          2690,808 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,955 B/op
                 ·gc.churn.PS_Survivor_Space:      0,258 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms

Iteration  10: 7,299 ns/op
                 ·gc.alloc.rate:                   2684,431 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2689,860 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,055 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         26,000 ms


# Run progress: 66,67% complete, ETA 00:07:03
# Fork: 2 of 3
# Warmup Iteration   1: 4,609 ns/op
# Warmup Iteration   2: 8,205 ns/op
# Warmup Iteration   3: 6,537 ns/op
# Warmup Iteration   4: 6,608 ns/op
# Warmup Iteration   5: 6,675 ns/op
Iteration   1: 6,681 ns/op
                 ·gc.alloc.rate:                   2928,383 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2934,643 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,057 B/op
                 ·gc.churn.PS_Survivor_Space:      0,418 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms

Iteration   2: 6,637 ns/op
                 ·gc.alloc.rate:                   2951,679 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2931,834 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,844 B/op
                 ·gc.churn.PS_Survivor_Space:      0,205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 6,625 ns/op
                 ·gc.alloc.rate:                   2957,917 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2974,322 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,139 B/op
                 ·gc.churn.PS_Survivor_Space:      0,400 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         27,000 ms

Iteration   4: 6,633 ns/op
                 ·gc.alloc.rate:                   2951,662 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2938,841 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,902 B/op
                 ·gc.churn.PS_Survivor_Space:      0,098 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         27,000 ms

Iteration   5: 6,633 ns/op
                 ·gc.alloc.rate:                   2952,145 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2968,353 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,138 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         28,000 ms

Iteration   6: 6,702 ns/op
                 ·gc.alloc.rate:                   2924,190 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2924,792 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,011 B/op
                 ·gc.churn.PS_Survivor_Space:      0,080 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         27,000 ms

Iteration   7: 6,630 ns/op
                 ·gc.alloc.rate:                   2951,771 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2940,518 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,914 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 6,646 ns/op
                 ·gc.alloc.rate:                   2945,094 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2947,175 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,023 B/op
                 ·gc.churn.PS_Survivor_Space:      0,107 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 6,585 ns/op
                 ·gc.alloc.rate:                   2975,598 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2976,147 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,010 B/op
                 ·gc.churn.PS_Survivor_Space:      0,080 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        113,000 counts
                 ·gc.time:                         27,000 ms

Iteration  10: 6,720 ns/op
                 ·gc.alloc.rate:                   2915,561 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2920,314 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,045 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms


# Run progress: 70,83% complete, ETA 00:06:10
# Fork: 3 of 3
# Warmup Iteration   1: 4,593 ns/op
# Warmup Iteration   2: 8,234 ns/op
# Warmup Iteration   3: 6,744 ns/op
# Warmup Iteration   4: 6,674 ns/op
# Warmup Iteration   5: 6,682 ns/op
Iteration   1: 6,661 ns/op
                 ·gc.alloc.rate:                   2943,490 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2934,553 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,934 B/op
                 ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         28,000 ms

Iteration   2: 6,601 ns/op
                 ·gc.alloc.rate:                   2971,521 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2978,165 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,060 B/op
                 ·gc.churn.PS_Survivor_Space:      0,134 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 6,605 ns/op
                 ·gc.alloc.rate:                   2965,092 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2967,022 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,022 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         28,000 ms

Iteration   4: 6,593 ns/op
                 ·gc.alloc.rate:                   2972,742 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2956,985 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,878 B/op
                 ·gc.churn.PS_Survivor_Space:      0,205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        112,000 counts
                 ·gc.time:                         27,000 ms

Iteration   5: 6,622 ns/op
                 ·gc.alloc.rate:                   2960,450 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2973,185 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,110 B/op
                 ·gc.churn.PS_Survivor_Space:      0,134 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        126,000 counts
                 ·gc.time:                         28,000 ms

Iteration   6: 6,639 ns/op
                 ·gc.alloc.rate:                   2951,788 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2962,682 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,095 B/op
                 ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 6,676 ns/op
                 ·gc.alloc.rate:                   2937,116 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2936,590 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,001 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        111,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 6,710 ns/op
                 ·gc.alloc.rate:                   2922,809 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2909,670 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,898 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 6,642 ns/op
                 ·gc.alloc.rate:                   2947,608 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2943,666 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,974 B/op
                 ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         28,000 ms

Iteration  10: 6,672 ns/op
                 ·gc.alloc.rate:                   2940,665 MB/sec
                 ·gc.alloc.rate.norm:              24,006 B/op
                 ·gc.churn.PS_Eden_Space:          2957,860 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,146 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         26,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  6,853 ±(99.9%) 0,201 ns/op [Average]
  (min, avg, max) = (6,585, 6,853, 7,314), stdev = 0,301
  CI (99.9%): [6,652, 7,055] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate":
  2864,138 ±(99.9%) 81,643 MB/sec [Average]
  (min, avg, max) = (2677,099, 2864,138, 2975,598), stdev = 122,200
  CI (99.9%): [2782,495, 2945,782] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm":
  24,006 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,006, 24,006, 24,007), stdev = 0,001
  CI (99.9%): [24,006, 24,006] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space":
  2864,807 ±(99.9%) 81,712 MB/sec [Average]
  (min, avg, max) = (2676,859, 2864,807, 2978,165), stdev = 122,302
  CI (99.9%): [2783,095, 2946,518] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24,012 ±(99.9%) 0,060 B/op [Average]
  (min, avg, max) = (23,842, 24,012, 24,146), stdev = 0,090
  CI (99.9%): [23,952, 24,072] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space":
  0,127 ±(99.9%) 0,062 MB/sec [Average]
  (min, avg, max) = (0,053, 0,127, 0,418), stdev = 0,093
  CI (99.9%): [0,065, 0,189] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0,001 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0,001, 0,003), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count":
  3525,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (111,000, 117,500, 126,000), stdev = 4,249
  CI (99.9%): [3525,000, 3525,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time":
  804,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (25,000, 26,800, 28,000), stdev = 0,805
  CI (99.9%): [804,000, 804,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75,00% complete, ETA 00:05:17
# Fork: 1 of 3
# Warmup Iteration   1: 4,181 ns/op
# Warmup Iteration   2: 4,036 ns/op
# Warmup Iteration   3: 3,793 ns/op
# Warmup Iteration   4: 3,785 ns/op
# Warmup Iteration   5: 3,821 ns/op
Iteration   1: 3,803 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,832 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,788 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,821 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,763 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,824 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,864 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,812 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,780 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,814 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 79,17% complete, ETA 00:04:24
# Fork: 2 of 3
# Warmup Iteration   1: 4,026 ns/op
# Warmup Iteration   2: 4,219 ns/op
# Warmup Iteration   3: 3,793 ns/op
# Warmup Iteration   4: 3,799 ns/op
# Warmup Iteration   5: 3,782 ns/op
Iteration   1: 3,767 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,797 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,780 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,810 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,759 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,760 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,752 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,799 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,763 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,773 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 83,33% complete, ETA 00:03:31
# Fork: 3 of 3
# Warmup Iteration   1: 4,019 ns/op
# Warmup Iteration   2: 4,033 ns/op
# Warmup Iteration   3: 3,749 ns/op
# Warmup Iteration   4: 3,782 ns/op
# Warmup Iteration   5: 3,769 ns/op
Iteration   1: 3,787 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,762 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,813 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,763 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,782 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,765 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,777 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,776 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,773 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,769 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  3,788 ±(99.9%) 0,018 ns/op [Average]
  (min, avg, max) = (3,752, 3,788, 3,864), stdev = 0,027
  CI (99.9%): [3,770, 3,805] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87,50% complete, ETA 00:02:38
# Fork: 1 of 3
# Warmup Iteration   1: 2,663 ns/op
# Warmup Iteration   2: 2,624 ns/op
# Warmup Iteration   3: 2,360 ns/op
# Warmup Iteration   4: 2,351 ns/op
# Warmup Iteration   5: 2,350 ns/op
Iteration   1: 2,342 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2,374 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2,330 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2,349 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2,362 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2,361 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2,342 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2,354 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2,341 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2,353 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 91,67% complete, ETA 00:01:45
# Fork: 2 of 3
# Warmup Iteration   1: 2,683 ns/op
# Warmup Iteration   2: 2,633 ns/op
# Warmup Iteration   3: 2,373 ns/op
# Warmup Iteration   4: 2,357 ns/op
# Warmup Iteration   5: 2,339 ns/op
Iteration   1: 2,363 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2,348 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2,351 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2,350 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2,354 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2,341 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2,352 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2,343 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2,362 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2,369 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 95,83% complete, ETA 00:00:52
# Fork: 3 of 3
# Warmup Iteration   1: 2,662 ns/op
# Warmup Iteration   2: 2,665 ns/op
# Warmup Iteration   3: 2,404 ns/op
# Warmup Iteration   4: 2,425 ns/op
# Warmup Iteration   5: 2,396 ns/op
Iteration   1: 2,433 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2,383 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2,395 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2,410 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2,405 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2,407 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2,417 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2,396 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2,405 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2,385 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  2,369 ±(99.9%) 0,018 ns/op [Average]
  (min, avg, max) = (2,330, 2,369, 2,433), stdev = 0,027
  CI (99.9%): [2,351, 2,388] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:21:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt     Score    Error   Units
MethodCallBenchmark.directCallConsumeCPU                                                  avgt   30     3,270 ±  0,028   ns/op
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate                                   avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm                              avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.directCallConsumeCPU:·gc.count                                        avgt   30       ≈ 0           counts
MethodCallBenchmark.directCallIncrement                                                   avgt   30     1,957 ±  0,004   ns/op
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate                                    avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm                               avgt   30    ≈ 10⁻⁷             B/op
MethodCallBenchmark.directCallIncrement:·gc.count                                         avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU                                      avgt   30     4,461 ±  0,020   ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate                       avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm                  avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count                            avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement                                       avgt   30     3,726 ±  0,016   ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate                        avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm                   avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count                             avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU                                  avgt   30     5,231 ±  0,053   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate                   avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm              avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count                        avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement                                   avgt   30     6,853 ±  0,201   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate                    avgt   30  2864,138 ± 81,643  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm               avgt   30    24,006 ±  0,001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space           avgt   30  2864,807 ± 81,712  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm      avgt   30    24,012 ±  0,060    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space       avgt   30     0,127 ±  0,062  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm  avgt   30     0,001 ±  0,001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count                         avgt   30  3525,000           counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time                          avgt   30   804,000               ms
MethodCallBenchmark.staticProxyConsumeCPU                                                 avgt   30     3,788 ±  0,018   ns/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate                                  avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm                             avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.count                                       avgt   30       ≈ 0           counts
MethodCallBenchmark.staticProxyIncrement                                                  avgt   30     2,369 ±  0,018   ns/op
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate                                   avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm                              avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.staticProxyIncrement:·gc.count                                        avgt   30       ≈ 0           counts
# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach

# Run progress: 0,00% complete, ETA 00:27:00
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7,820 ns/op
# Warmup Iteration   2: 7,583 ns/op
# Warmup Iteration   3: 7,757 ns/op
# Warmup Iteration   4: 7,747 ns/op
# Warmup Iteration   5: 7,624 ns/op
Iteration   1: 7,582 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7,769 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7,654 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7,781 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7,604 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7,795 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7,763 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7,669 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7,615 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7,750 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 2,78% complete, ETA 00:30:59
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7,741 ns/op
# Warmup Iteration   2: 7,733 ns/op
# Warmup Iteration   3: 7,790 ns/op
# Warmup Iteration   4: 7,607 ns/op
# Warmup Iteration   5: 7,793 ns/op
Iteration   1: 7,595 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7,824 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7,609 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7,833 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7,644 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7,815 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7,792 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7,747 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7,551 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7,801 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 5,56% complete, ETA 00:30:02
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7,796 ns/op
# Warmup Iteration   2: 7,712 ns/op
# Warmup Iteration   3: 7,936 ns/op
# Warmup Iteration   4: 7,684 ns/op
# Warmup Iteration   5: 7,836 ns/op
Iteration   1: 7,780 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7,843 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7,684 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7,771 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7,633 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7,698 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7,604 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7,660 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7,685 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7,738 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach":
  7,710 ±(99.9%) 0,058 ns/op [Average]
  (min, avg, max) = (7,551, 7,710, 7,843), stdev = 0,087
  CI (99.9%): [7,652, 7,768] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize

# Run progress: 8,33% complete, ETA 00:29:08
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,623 ns/op
# Warmup Iteration   2: 3,598 ns/op
# Warmup Iteration   3: 3,567 ns/op
# Warmup Iteration   4: 3,573 ns/op
# Warmup Iteration   5: 3,576 ns/op
Iteration   1: 3,562 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,577 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,610 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,605 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,542 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,594 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,580 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,572 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,581 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,559 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 11,11% complete, ETA 00:28:16
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,618 ns/op
# Warmup Iteration   2: 3,617 ns/op
# Warmup Iteration   3: 3,606 ns/op
# Warmup Iteration   4: 3,562 ns/op
# Warmup Iteration   5: 3,572 ns/op
Iteration   1: 3,534 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,570 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,518 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,570 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,530 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,579 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,545 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,594 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,556 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,575 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 13,89% complete, ETA 00:27:23
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,677 ns/op
# Warmup Iteration   2: 3,657 ns/op
# Warmup Iteration   3: 3,543 ns/op
# Warmup Iteration   4: 3,567 ns/op
# Warmup Iteration   5: 3,536 ns/op
Iteration   1: 3,533 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,540 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,555 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,578 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,561 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,607 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,556 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,569 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,561 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,585 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize":
  3,567 ±(99.9%) 0,016 ns/op [Average]
  (min, avg, max) = (3,518, 3,567, 3,610), stdev = 0,023
  CI (99.9%): [3,551, 3,582] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray

# Run progress: 16,67% complete, ETA 00:26:30
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,830 ns/op
# Warmup Iteration   2: 23,313 ns/op
# Warmup Iteration   3: 22,579 ns/op
# Warmup Iteration   4: 21,794 ns/op
# Warmup Iteration   5: 22,109 ns/op
Iteration   1: 21,765 ns/op
                 ·gc.alloc.rate:                   2397,888 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2400,677 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,094 B/op
                 ·gc.churn.PS_Survivor_Space:      0,445 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         27,000 ms

Iteration   2: 22,159 ns/op
                 ·gc.alloc.rate:                   2361,530 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2353,113 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,792 B/op
                 ·gc.churn.PS_Survivor_Space:      0,320 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 21,877 ns/op
                 ·gc.alloc.rate:                   2392,365 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2385,816 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,843 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        111,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 22,397 ns/op
                 ·gc.alloc.rate:                   2334,332 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2332,735 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,978 B/op
                 ·gc.churn.PS_Survivor_Space:      0,526 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        125,000 counts
                 ·gc.time:                         27,000 ms

Iteration   5: 22,112 ns/op
                 ·gc.alloc.rate:                   2364,204 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2367,728 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,116 B/op
                 ·gc.churn.PS_Survivor_Space:      0,454 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         25,000 ms

Iteration   6: 22,232 ns/op
                 ·gc.alloc.rate:                   2349,868 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2358,671 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,260 B/op
                 ·gc.churn.PS_Survivor_Space:      0,348 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 21,865 ns/op
                 ·gc.alloc.rate:                   2390,810 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2392,834 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,073 B/op
                 ·gc.churn.PS_Survivor_Space:      0,543 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        113,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 22,618 ns/op
                 ·gc.alloc.rate:                   2312,688 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2303,735 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,773 B/op
                 ·gc.churn.PS_Survivor_Space:      0,516 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 22,373 ns/op
                 ·gc.alloc.rate:                   2335,402 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2330,768 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,892 B/op
                 ·gc.churn.PS_Survivor_Space:      0,551 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         26,000 ms

Iteration  10: 22,100 ns/op
                 ·gc.alloc.rate:                   2365,284 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2369,842 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,142 B/op
                 ·gc.churn.PS_Survivor_Space:      0,517 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         26,000 ms


# Run progress: 19,44% complete, ETA 00:25:37
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,939 ns/op
# Warmup Iteration   2: 23,760 ns/op
# Warmup Iteration   3: 23,779 ns/op
# Warmup Iteration   4: 23,702 ns/op
# Warmup Iteration   5: 23,849 ns/op
Iteration   1: 23,701 ns/op
                 ·gc.alloc.rate:                   2203,142 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2201,604 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,978 B/op
                 ·gc.churn.PS_Survivor_Space:      0,355 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         26,000 ms

Iteration   2: 23,933 ns/op
                 ·gc.alloc.rate:                   2186,367 MB/sec
                 ·gc.alloc.rate.norm:              64,024 B/op
                 ·gc.churn.PS_Eden_Space:          2194,430 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,260 B/op
                 ·gc.churn.PS_Survivor_Space:      0,507 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        132,000 counts
                 ·gc.time:                         26,000 ms

Iteration   3: 23,689 ns/op
                 ·gc.alloc.rate:                   2204,196 MB/sec
                 ·gc.alloc.rate.norm:              64,023 B/op
                 ·gc.churn.PS_Eden_Space:          2193,316 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,707 B/op
                 ·gc.churn.PS_Survivor_Space:      0,506 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        127,000 counts
                 ·gc.time:                         27,000 ms

Iteration   4: 23,799 ns/op
                 ·gc.alloc.rate:                   2196,498 MB/sec
                 ·gc.alloc.rate.norm:              64,023 B/op
                 ·gc.churn.PS_Eden_Space:          2198,540 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,083 B/op
                 ·gc.churn.PS_Survivor_Space:      0,356 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        126,000 counts
                 ·gc.time:                         26,000 ms

Iteration   5: 23,697 ns/op
                 ·gc.alloc.rate:                   2203,740 MB/sec
                 ·gc.alloc.rate.norm:              64,024 B/op
                 ·gc.churn.PS_Eden_Space:          2204,627 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,050 B/op
                 ·gc.churn.PS_Survivor_Space:      0,347 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        134,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 23,743 ns/op
                 ·gc.alloc.rate:                   2202,835 MB/sec
                 ·gc.alloc.rate.norm:              64,023 B/op
                 ·gc.churn.PS_Eden_Space:          2203,805 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,051 B/op
                 ·gc.churn.PS_Survivor_Space:      0,402 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        127,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 23,445 ns/op
                 ·gc.alloc.rate:                   2227,895 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2236,830 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,279 B/op
                 ·gc.churn.PS_Survivor_Space:      0,435 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 23,774 ns/op
                 ·gc.alloc.rate:                   2200,571 MB/sec
                 ·gc.alloc.rate.norm:              64,024 B/op
                 ·gc.churn.PS_Eden_Space:          2198,989 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,978 B/op
                 ·gc.churn.PS_Survivor_Space:      0,543 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        135,000 counts
                 ·gc.time:                         27,000 ms

Iteration   9: 23,672 ns/op
                 ·gc.alloc.rate:                   2210,933 MB/sec
                 ·gc.alloc.rate.norm:              64,023 B/op
                 ·gc.churn.PS_Eden_Space:          2208,914 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,964 B/op
                 ·gc.churn.PS_Survivor_Space:      0,535 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        128,000 counts
                 ·gc.time:                         27,000 ms

Iteration  10: 23,951 ns/op
                 ·gc.alloc.rate:                   2179,378 MB/sec
                 ·gc.alloc.rate.norm:              64,024 B/op
                 ·gc.churn.PS_Eden_Space:          2192,700 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,416 B/op
                 ·gc.churn.PS_Survivor_Space:      0,604 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 ·gc.count:                        135,000 counts
                 ·gc.time:                         28,000 ms


# Run progress: 22,22% complete, ETA 00:24:44
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,838 ns/op
# Warmup Iteration   2: 23,267 ns/op
# Warmup Iteration   3: 22,591 ns/op
# Warmup Iteration   4: 22,457 ns/op
# Warmup Iteration   5: 22,663 ns/op
Iteration   1: 22,398 ns/op
                 ·gc.alloc.rate:                   2334,724 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2341,328 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,202 B/op
                 ·gc.churn.PS_Survivor_Space:      0,428 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         27,000 ms

Iteration   2: 22,657 ns/op
                 ·gc.alloc.rate:                   2308,763 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2307,431 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,984 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 22,452 ns/op
                 ·gc.alloc.rate:                   2325,082 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2324,682 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,009 B/op
                 ·gc.churn.PS_Survivor_Space:      0,418 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         27,000 ms

Iteration   4: 22,809 ns/op
                 ·gc.alloc.rate:                   2291,604 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2294,017 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,089 B/op
                 ·gc.churn.PS_Survivor_Space:      0,401 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         27,000 ms

Iteration   5: 22,422 ns/op
                 ·gc.alloc.rate:                   2332,491 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2331,631 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,997 B/op
                 ·gc.churn.PS_Survivor_Space:      0,365 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 22,548 ns/op
                 ·gc.alloc.rate:                   2320,205 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2326,145 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,185 B/op
                 ·gc.churn.PS_Survivor_Space:      0,383 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         27,000 ms

Iteration   7: 22,444 ns/op
                 ·gc.alloc.rate:                   2327,701 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2328,757 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,048 B/op
                 ·gc.churn.PS_Survivor_Space:      0,374 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        112,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 22,969 ns/op
                 ·gc.alloc.rate:                   2271,788 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2281,315 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,290 B/op
                 ·gc.churn.PS_Survivor_Space:      0,632 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 ·gc.count:                        126,000 counts
                 ·gc.time:                         27,000 ms

Iteration   9: 22,450 ns/op
                 ·gc.alloc.rate:                   2326,093 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2320,908 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,877 B/op
                 ·gc.churn.PS_Survivor_Space:      0,526 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         27,000 ms

Iteration  10: 22,500 ns/op
                 ·gc.alloc.rate:                   2323,703 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2332,406 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,261 B/op
                 ·gc.churn.PS_Survivor_Space:      0,481 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         27,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray":
  22,818 ±(99.9%) 0,477 ns/op [Average]
  (min, avg, max) = (21,765, 22,818, 23,951), stdev = 0,714
  CI (99.9%): [22,342, 23,295] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate":
  2292,736 ±(99.9%) 47,525 MB/sec [Average]
  (min, avg, max) = (2179,378, 2292,736, 2397,888), stdev = 71,133
  CI (99.9%): [2245,211, 2340,261] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm":
  64,021 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (64,019, 64,021, 64,024), stdev = 0,002
  CI (99.9%): [64,020, 64,023] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space":
  2293,943 ±(99.9%) 47,143 MB/sec [Average]
  (min, avg, max) = (2192,700, 2293,943, 2400,677), stdev = 70,562
  CI (99.9%): [2246,800, 2341,086] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64,056 ±(99.9%) 0,113 B/op [Average]
  (min, avg, max) = (63,707, 64,056, 64,416), stdev = 0,169
  CI (99.9%): [63,943, 64,168] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,456 ±(99.9%) 0,055 MB/sec [Average]
  (min, avg, max) = (0,320, 0,456, 0,632), stdev = 0,083
  CI (99.9%): [0,401, 0,512] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,013 ±(99.9%) 0,002 B/op [Average]
  (min, avg, max) = (0,009, 0,013, 0,018), stdev = 0,002
  CI (99.9%): [0,011, 0,014] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.count":
  3665,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (111,000, 122,167, 135,000), stdev = 6,644
  CI (99.9%): [3665,000, 3665,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.time":
  798,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (25,000, 26,600, 28,000), stdev = 0,621
  CI (99.9%): [798,000, 798,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach

# Run progress: 25,00% complete, ETA 00:23:51
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
17,705 ns/op
# Warmup Iteration   2: 18,447 ns/op
# Warmup Iteration   3: 18,195 ns/op
# Warmup Iteration   4: 18,199 ns/op
# Warmup Iteration   5: 18,243 ns/op
Iteration   1: 18,133 ns/op
                 ·gc.alloc.rate:                   1080,104 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1086,810 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,162 B/op
                 ·gc.churn.PS_Survivor_Space:      0,169 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
                 ·gc.count:                        93,000 counts
                 ·gc.time:                         19,000 ms

Iteration   2: 18,152 ns/op
                 ·gc.alloc.rate:                   1078,096 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1074,138 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,925 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        92,000 counts
                 ·gc.time:                         20,000 ms

Iteration   3: 18,135 ns/op
                 ·gc.alloc.rate:                   1081,130 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1087,685 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,159 B/op
                 ·gc.churn.PS_Survivor_Space:      0,160 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
                 ·gc.count:                        93,000 counts
                 ·gc.time:                         19,000 ms

Iteration   4: 18,374 ns/op
                 ·gc.alloc.rate:                   1067,596 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1065,105 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,957 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        91,000 counts
                 ·gc.time:                         19,000 ms

Iteration   5: 18,137 ns/op
                 ·gc.alloc.rate:                   1081,427 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1085,068 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,094 B/op
                 ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        93,000 counts
                 ·gc.time:                         20,000 ms

Iteration   6: 18,166 ns/op
                 ·gc.alloc.rate:                   1077,554 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1074,642 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,948 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        92,000 counts
                 ·gc.time:                         19,000 ms

Iteration   7: 18,054 ns/op
                 ·gc.alloc.rate:                   1084,447 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1083,346 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,989 B/op
                 ·gc.churn.PS_Survivor_Space:      0,098 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        93,000 counts
                 ·gc.time:                         19,000 ms

Iteration   8: 18,179 ns/op
                 ·gc.alloc.rate:                   1079,479 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1086,030 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,159 B/op
                 ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        93,000 counts
                 ·gc.time:                         20,000 ms

Iteration   9: 18,187 ns/op
                 ·gc.alloc.rate:                   1079,084 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1076,742 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,961 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        92,000 counts
                 ·gc.time:                         18,000 ms

Iteration  10: 18,361 ns/op
                 ·gc.alloc.rate:                   1068,749 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1065,562 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,941 B/op
                 ·gc.churn.PS_Survivor_Space:      0,098 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        91,000 counts
                 ·gc.time:                         19,000 ms


# Run progress: 27,78% complete, ETA 00:22:58
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19,946 ns/op
# Warmup Iteration   2: 19,414 ns/op
# Warmup Iteration   3: 20,540 ns/op
# Warmup Iteration   4: 20,368 ns/op
# Warmup Iteration   5: 20,560 ns/op
Iteration   1: 20,317 ns/op
                 ·gc.alloc.rate:                   964,749 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          968,550 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,108 B/op
                 ·gc.churn.PS_Survivor_Space:      0,267 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
                 ·gc.count:                        83,000 counts
                 ·gc.time:                         18,000 ms

Iteration   2: 20,349 ns/op
                 ·gc.alloc.rate:                   964,181 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          959,758 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,903 B/op
                 ·gc.churn.PS_Survivor_Space:      0,107 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
                 ·gc.count:                        82,000 counts
                 ·gc.time:                         19,000 ms

Iteration   3: 20,626 ns/op
                 ·gc.alloc.rate:                   951,106 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          957,467 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,174 B/op
                 ·gc.churn.PS_Survivor_Space:      0,098 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        82,000 counts
                 ·gc.time:                         18,000 ms

Iteration   4: 20,530 ns/op
                 ·gc.alloc.rate:                   955,772 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          957,021 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,044 B/op
                 ·gc.churn.PS_Survivor_Space:      0,169 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
                 ·gc.count:                        82,000 counts
                 ·gc.time:                         18,000 ms

Iteration   5: 20,360 ns/op
                 ·gc.alloc.rate:                   963,361 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          959,680 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,921 B/op
                 ·gc.churn.PS_Survivor_Space:      0,134 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
                 ·gc.count:                        82,000 counts
                 ·gc.time:                         18,000 ms

Iteration   6: 20,486 ns/op
                 ·gc.alloc.rate:                   957,304 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          957,271 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,012 B/op
                 ·gc.churn.PS_Survivor_Space:      0,392 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        82,000 counts
                 ·gc.time:                         18,000 ms

Iteration   7: 20,414 ns/op
                 ·gc.alloc.rate:                   959,020 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          967,318 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,221 B/op
                 ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        83,000 counts
                 ·gc.time:                         20,000 ms

Iteration   8: 20,780 ns/op
                 ·gc.alloc.rate:                   943,826 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          933,795 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,758 B/op
                 ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        80,000 counts
                 ·gc.time:                         17,000 ms

Iteration   9: 20,324 ns/op
                 ·gc.alloc.rate:                   964,034 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          970,176 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,166 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        83,000 counts
                 ·gc.time:                         18,000 ms

Iteration  10: 20,692 ns/op
                 ·gc.alloc.rate:                   947,985 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          947,534 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,001 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        81,000 counts
                 ·gc.time:                         18,000 ms


# Run progress: 30,56% complete, ETA 00:22:05
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19,552 ns/op
# Warmup Iteration   2: 17,849 ns/op
# Warmup Iteration   3: 17,794 ns/op
# Warmup Iteration   4: 17,769 ns/op
# Warmup Iteration   5: 17,791 ns/op
Iteration   1: 17,698 ns/op
                 ·gc.alloc.rate:                   1107,134 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1110,566 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,087 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        95,000 counts
                 ·gc.time:                         21,000 ms

Iteration   2: 17,785 ns/op
                 ·gc.alloc.rate:                   1103,102 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1111,966 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,206 B/op
                 ·gc.churn.PS_Survivor_Space:      0,339 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
                 ·gc.count:                        95,000 counts
                 ·gc.time:                         21,000 ms

Iteration   3: 17,756 ns/op
                 ·gc.alloc.rate:                   1102,522 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1096,940 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,891 B/op
                 ·gc.churn.PS_Survivor_Space:      0,080 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        94,000 counts
                 ·gc.time:                         20,000 ms

Iteration   4: 17,900 ns/op
                 ·gc.alloc.rate:                   1093,302 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1097,614 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,108 B/op
                 ·gc.churn.PS_Survivor_Space:      0,089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        94,000 counts
                 ·gc.time:                         19,000 ms

Iteration   5: 17,708 ns/op
                 ·gc.alloc.rate:                   1108,136 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1111,080 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,077 B/op
                 ·gc.churn.PS_Survivor_Space:      0,053 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        95,000 counts
                 ·gc.time:                         22,000 ms

Iteration   6: 17,926 ns/op
                 ·gc.alloc.rate:                   1091,902 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1085,512 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,872 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        93,000 counts
                 ·gc.time:                         19,000 ms

Iteration   7: 17,689 ns/op
                 ·gc.alloc.rate:                   1107,865 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1107,626 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,008 B/op
                 ·gc.churn.PS_Survivor_Space:      0,284 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
                 ·gc.count:                        95,000 counts
                 ·gc.time:                         22,000 ms

Iteration   8: 17,817 ns/op
                 ·gc.alloc.rate:                   1098,482 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1108,680 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,236 B/op
                 ·gc.churn.PS_Survivor_Space:      0,044 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        95,000 counts
                 ·gc.time:                         20,000 ms

Iteration   9: 17,694 ns/op
                 ·gc.alloc.rate:                   1106,572 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1106,320 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,007 B/op
                 ·gc.churn.PS_Survivor_Space:      0,071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        95,000 counts
                 ·gc.time:                         22,000 ms

Iteration  10: 17,841 ns/op
                 ·gc.alloc.rate:                   1099,850 MB/sec
                 ·gc.alloc.rate.norm:              24,013 B/op
                 ·gc.churn.PS_Eden_Space:          1100,704 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,031 B/op
                 ·gc.churn.PS_Survivor_Space:      0,464 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        94,000 counts
                 ·gc.time:                         21,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach":
  18,819 ±(99.9%) 0,814 ns/op [Average]
  (min, avg, max) = (17,689, 18,819, 20,780), stdev = 1,218
  CI (99.9%): [18,005, 19,633] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate":
  1045,596 ±(99.9%) 43,222 MB/sec [Average]
  (min, avg, max) = (943,826, 1045,596, 1108,136), stdev = 64,692
  CI (99.9%): [1002,374, 1088,817] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm":
  24,013 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,013, 24,013, 24,013), stdev = 0,001
  CI (99.9%): [24,013, 24,013] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space":
  1046,690 ±(99.9%) 43,669 MB/sec [Average]
  (min, avg, max) = (933,795, 1046,690, 1111,966), stdev = 65,362
  CI (99.9%): [1003,021, 1090,359] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space.norm":
  24,037 ±(99.9%) 0,079 B/op [Average]
  (min, avg, max) = (23,758, 24,037, 24,236), stdev = 0,118
  CI (99.9%): [23,958, 24,117] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space":
  0,131 ±(99.9%) 0,073 MB/sec [Average]
  (min, avg, max) = (0,044, 0,131, 0,464), stdev = 0,109
  CI (99.9%): [0,058, 0,204] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space.norm":
  0,003 ±(99.9%) 0,002 B/op [Average]
  (min, avg, max) = (0,001, 0,003, 0,010), stdev = 0,003
  CI (99.9%): [0,001, 0,005] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.count":
  2688,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (80,000, 89,600, 95,000), stdev = 5,599
  CI (99.9%): [2688,000, 2688,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.time":
  581,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (17,000, 19,367, 22,000), stdev = 1,351
  CI (99.9%): [581,000, 581,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize

# Run progress: 33,33% complete, ETA 00:21:12
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,750 ns/op
# Warmup Iteration   2: 14,495 ns/op
# Warmup Iteration   3: 14,247 ns/op
# Warmup Iteration   4: 14,251 ns/op
# Warmup Iteration   5: 14,165 ns/op
Iteration   1: 14,232 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14,377 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14,185 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14,269 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14,177 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 14,171 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 14,365 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 14,330 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 14,096 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 14,332 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 36,11% complete, ETA 00:20:19
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,486 ns/op
# Warmup Iteration   2: 13,969 ns/op
# Warmup Iteration   3: 15,087 ns/op
# Warmup Iteration   4: 15,052 ns/op
# Warmup Iteration   5: 15,165 ns/op
Iteration   1: 14,987 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15,261 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19,413 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15,063 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14,805 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 15,214 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 15,403 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 15,258 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 14,947 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 15,296 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 38,89% complete, ETA 00:19:26
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,348 ns/op
# Warmup Iteration   2: 13,951 ns/op
# Warmup Iteration   3: 15,394 ns/op
# Warmup Iteration   4: 14,912 ns/op
# Warmup Iteration   5: 15,064 ns/op
Iteration   1: 15,016 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15,026 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14,936 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15,125 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14,909 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 15,232 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 14,886 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 15,341 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 14,835 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 15,276 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize":
  14,959 ±(99.9%) 0,631 ns/op [Average]
  (min, avg, max) = (14,096, 14,959, 19,413), stdev = 0,945
  CI (99.9%): [14,328, 15,590] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray

# Run progress: 41,67% complete, ETA 00:18:33
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
32,398 ns/op
# Warmup Iteration   2: 30,211 ns/op
# Warmup Iteration   3: 29,573 ns/op
# Warmup Iteration   4: 30,214 ns/op
# Warmup Iteration   5: 29,756 ns/op
Iteration   1: 29,540 ns/op
                 ·gc.alloc.rate:                   1768,648 MB/sec
                 ·gc.alloc.rate.norm:              64,025 B/op
                 ·gc.churn.PS_Eden_Space:          1766,707 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,955 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        109,000 counts
                 ·gc.time:                         24,000 ms

Iteration   2: 29,716 ns/op
                 ·gc.alloc.rate:                   1756,770 MB/sec
                 ·gc.alloc.rate.norm:              64,029 B/op
                 ·gc.churn.PS_Eden_Space:          1756,323 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,013 B/op
                 ·gc.churn.PS_Survivor_Space:      0,507 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 ·gc.count:                        128,000 counts
                 ·gc.time:                         26,000 ms

Iteration   3: 31,063 ns/op
                 ·gc.alloc.rate:                   1680,444 MB/sec
                 ·gc.alloc.rate.norm:              64,028 B/op
                 ·gc.churn.PS_Eden_Space:          1681,615 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,072 B/op
                 ·gc.churn.PS_Survivor_Space:      0,347 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 29,827 ns/op
                 ·gc.alloc.rate:                   1751,001 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1757,286 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,257 B/op
                 ·gc.churn.PS_Survivor_Space:      0,578 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         24,000 ms

Iteration   5: 31,102 ns/op
                 ·gc.alloc.rate:                   1681,883 MB/sec
                 ·gc.alloc.rate.norm:              64,029 B/op
                 ·gc.churn.PS_Eden_Space:          1677,297 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,854 B/op
                 ·gc.churn.PS_Survivor_Space:      0,383 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 29,786 ns/op
                 ·gc.alloc.rate:                   1753,207 MB/sec
                 ·gc.alloc.rate.norm:              64,028 B/op
                 ·gc.churn.PS_Eden_Space:          1748,846 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,869 B/op
                 ·gc.churn.PS_Survivor_Space:      0,508 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         25,000 ms

Iteration   7: 29,499 ns/op
                 ·gc.alloc.rate:                   1772,283 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1774,686 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,114 B/op
                 ·gc.churn.PS_Survivor_Space:      0,348 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 29,794 ns/op
                 ·gc.alloc.rate:                   1753,706 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1766,484 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,494 B/op
                 ·gc.churn.PS_Survivor_Space:      0,454 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 29,362 ns/op
                 ·gc.alloc.rate:                   1782,671 MB/sec
                 ·gc.alloc.rate.norm:              64,026 B/op
                 ·gc.churn.PS_Eden_Space:          1780,427 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,945 B/op
                 ·gc.churn.PS_Survivor_Space:      0,454 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         24,000 ms

Iteration  10: 29,645 ns/op
                 ·gc.alloc.rate:                   1762,148 MB/sec
                 ·gc.alloc.rate.norm:              64,029 B/op
                 ·gc.churn.PS_Eden_Space:          1758,318 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,890 B/op
                 ·gc.churn.PS_Survivor_Space:      0,507 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 ·gc.count:                        129,000 counts
                 ·gc.time:                         27,000 ms


# Run progress: 44,44% complete, ETA 00:17:40
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
32,289 ns/op
# Warmup Iteration   2: 30,504 ns/op
# Warmup Iteration   3: 30,282 ns/op
# Warmup Iteration   4: 29,654 ns/op
# Warmup Iteration   5: 29,941 ns/op
Iteration   1: 29,599 ns/op
                 ·gc.alloc.rate:                   1763,936 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1762,232 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,966 B/op
                 ·gc.churn.PS_Survivor_Space:      0,356 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms

Iteration   2: 30,146 ns/op
                 ·gc.alloc.rate:                   1731,207 MB/sec
                 ·gc.alloc.rate.norm:              64,026 B/op
                 ·gc.churn.PS_Eden_Space:          1733,896 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,126 B/op
                 ·gc.churn.PS_Survivor_Space:      0,347 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         25,000 ms

Iteration   3: 29,627 ns/op
                 ·gc.alloc.rate:                   1762,289 MB/sec
                 ·gc.alloc.rate.norm:              64,026 B/op
                 ·gc.churn.PS_Eden_Space:          1760,195 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,950 B/op
                 ·gc.churn.PS_Survivor_Space:      0,445 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         27,000 ms

Iteration   4: 29,926 ns/op
                 ·gc.alloc.rate:                   1748,150 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1748,094 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,025 B/op
                 ·gc.churn.PS_Survivor_Space:      0,499 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         26,000 ms

Iteration   5: 29,667 ns/op
                 ·gc.alloc.rate:                   1760,741 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1764,091 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,149 B/op
                 ·gc.churn.PS_Survivor_Space:      0,321 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 29,923 ns/op
                 ·gc.alloc.rate:                   1745,135 MB/sec
                 ·gc.alloc.rate.norm:              64,025 B/op
                 ·gc.churn.PS_Eden_Space:          1740,933 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,871 B/op
                 ·gc.churn.PS_Survivor_Space:      0,285 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        110,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 29,648 ns/op
                 ·gc.alloc.rate:                   1761,209 MB/sec
                 ·gc.alloc.rate.norm:              64,026 B/op
                 ·gc.churn.PS_Eden_Space:          1767,629 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,260 B/op
                 ·gc.churn.PS_Survivor_Space:      0,355 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 29,956 ns/op
                 ·gc.alloc.rate:                   1742,299 MB/sec
                 ·gc.alloc.rate.norm:              64,025 B/op
                 ·gc.churn.PS_Eden_Space:          1749,292 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,282 B/op
                 ·gc.churn.PS_Survivor_Space:      0,373 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        109,000 counts
                 ·gc.time:                         25,000 ms

Iteration   9: 29,796 ns/op
                 ·gc.alloc.rate:                   1751,531 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1744,180 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,758 B/op
                 ·gc.churn.PS_Survivor_Space:      0,356 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         26,000 ms

Iteration  10: 30,000 ns/op
                 ·gc.alloc.rate:                   1743,987 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1747,414 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,152 B/op
                 ·gc.churn.PS_Survivor_Space:      0,392 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         26,000 ms


# Run progress: 47,22% complete, ETA 00:16:47
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
32,898 ns/op
# Warmup Iteration   2: 30,665 ns/op
# Warmup Iteration   3: 30,282 ns/op
# Warmup Iteration   4: 30,208 ns/op
# Warmup Iteration   5: 30,634 ns/op
Iteration   1: 30,453 ns/op
                 ·gc.alloc.rate:                   1714,978 MB/sec
                 ·gc.alloc.rate.norm:              64,029 B/op
                 ·gc.churn.PS_Eden_Space:          1722,246 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,300 B/op
                 ·gc.churn.PS_Survivor_Space:      0,454 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         26,000 ms

Iteration   2: 30,502 ns/op
                 ·gc.alloc.rate:                   1711,746 MB/sec
                 ·gc.alloc.rate.norm:              64,030 B/op
                 ·gc.churn.PS_Eden_Space:          1712,851 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,071 B/op
                 ·gc.churn.PS_Survivor_Space:      0,445 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
                 ·gc.count:                        128,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 30,294 ns/op
                 ·gc.alloc.rate:                   1724,046 MB/sec
                 ·gc.alloc.rate.norm:              64,028 B/op
                 ·gc.churn.PS_Eden_Space:          1727,661 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,163 B/op
                 ·gc.churn.PS_Survivor_Space:      0,302 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 30,732 ns/op
                 ·gc.alloc.rate:                   1699,076 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1690,863 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,718 B/op
                 ·gc.churn.PS_Survivor_Space:      0,320 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         24,000 ms

Iteration   5: 30,192 ns/op
                 ·gc.alloc.rate:                   1729,691 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1739,303 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,383 B/op
                 ·gc.churn.PS_Survivor_Space:      0,329 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         26,000 ms

Iteration   6: 30,454 ns/op
                 ·gc.alloc.rate:                   1714,578 MB/sec
                 ·gc.alloc.rate.norm:              64,029 B/op
                 ·gc.churn.PS_Eden_Space:          1711,719 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,922 B/op
                 ·gc.churn.PS_Survivor_Space:      0,284 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         25,000 ms

Iteration   7: 30,136 ns/op
                 ·gc.alloc.rate:                   1733,730 MB/sec
                 ·gc.alloc.rate.norm:              64,027 B/op
                 ·gc.churn.PS_Eden_Space:          1735,134 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,079 B/op
                 ·gc.churn.PS_Survivor_Space:      0,446 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 30,523 ns/op
                 ·gc.alloc.rate:                   1710,487 MB/sec
                 ·gc.alloc.rate.norm:              64,028 B/op
                 ·gc.churn.PS_Eden_Space:          1714,212 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,167 B/op
                 ·gc.churn.PS_Survivor_Space:      0,373 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 30,133 ns/op
                 ·gc.alloc.rate:                   1734,489 MB/sec
                 ·gc.alloc.rate.norm:              64,026 B/op
                 ·gc.churn.PS_Eden_Space:          1734,494 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,027 B/op
                 ·gc.churn.PS_Survivor_Space:      0,427 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms

Iteration  10: 30,305 ns/op
                 ·gc.alloc.rate:                   1722,919 MB/sec
                 ·gc.alloc.rate.norm:              64,028 B/op
                 ·gc.churn.PS_Eden_Space:          1728,851 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,249 B/op
                 ·gc.churn.PS_Survivor_Space:      0,525 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         27,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray":
  30,045 ±(99.9%) 0,299 ns/op [Average]
  (min, avg, max) = (29,362, 30,045, 31,102), stdev = 0,448
  CI (99.9%): [29,746, 30,344] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate":
  1738,966 ±(99.9%) 17,300 MB/sec [Average]
  (min, avg, max) = (1680,444, 1738,966, 1782,671), stdev = 25,894
  CI (99.9%): [1721,666, 1756,266] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm":
  64,027 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (64,025, 64,027, 64,030), stdev = 0,001
  CI (99.9%): [64,026, 64,028] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space":
  1740,109 ±(99.9%) 17,695 MB/sec [Average]
  (min, avg, max) = (1677,297, 1740,109, 1780,427), stdev = 26,485
  CI (99.9%): [1722,414, 1757,804] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64,069 ±(99.9%) 0,123 B/op [Average]
  (min, avg, max) = (63,718, 64,069, 64,494), stdev = 0,184
  CI (99.9%): [63,947, 64,192] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,405 ±(99.9%) 0,052 MB/sec [Average]
  (min, avg, max) = (0,284, 0,405, 0,578), stdev = 0,078
  CI (99.9%): [0,353, 0,457] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,015 ±(99.9%) 0,002 B/op [Average]
  (min, avg, max) = (0,010, 0,015, 0,021), stdev = 0,003
  CI (99.9%): [0,013, 0,017] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.count":
  3551,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (109,000, 118,367, 129,000), stdev = 4,923
  CI (99.9%): [3551,000, 3551,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.time":
  777,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (24,000, 25,900, 27,000), stdev = 0,995
  CI (99.9%): [777,000, 777,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach

# Run progress: 50,00% complete, ETA 00:15:54
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8,460 ns/op
# Warmup Iteration   2: 8,832 ns/op
# Warmup Iteration   3: 8,655 ns/op
# Warmup Iteration   4: 8,711 ns/op
# Warmup Iteration   5: 8,714 ns/op
Iteration   1: 8,620 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8,732 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8,626 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8,714 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8,719 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8,709 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8,706 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8,673 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8,670 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8,783 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 52,78% complete, ETA 00:15:01
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8,666 ns/op
# Warmup Iteration   2: 8,660 ns/op
# Warmup Iteration   3: 8,772 ns/op
# Warmup Iteration   4: 8,749 ns/op
# Warmup Iteration   5: 8,830 ns/op
Iteration   1: 8,717 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8,816 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8,717 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8,750 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8,692 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8,808 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8,820 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8,755 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8,676 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8,848 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 55,56% complete, ETA 00:14:08
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8,583 ns/op
# Warmup Iteration   2: 8,655 ns/op
# Warmup Iteration   3: 8,810 ns/op
# Warmup Iteration   4: 8,642 ns/op
# Warmup Iteration   5: 8,849 ns/op
Iteration   1: 8,605 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8,797 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8,648 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8,818 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8,674 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8,818 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8,670 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8,719 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8,700 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8,798 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach":
  8,727 ±(99.9%) 0,045 ns/op [Average]
  (min, avg, max) = (8,605, 8,727, 8,848), stdev = 0,067
  CI (99.9%): [8,682, 8,771] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize

# Run progress: 58,33% complete, ETA 00:13:15
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4,162 ns/op
# Warmup Iteration   2: 4,125 ns/op
# Warmup Iteration   3: 3,608 ns/op
# Warmup Iteration   4: 3,641 ns/op
# Warmup Iteration   5: 3,654 ns/op
Iteration   1: 3,632 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,637 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,633 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,607 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,654 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,650 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,606 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,612 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,623 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,633 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 61,11% complete, ETA 00:12:22
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4,145 ns/op
# Warmup Iteration   2: 4,159 ns/op
# Warmup Iteration   3: 3,581 ns/op
# Warmup Iteration   4: 3,572 ns/op
# Warmup Iteration   5: 3,592 ns/op
Iteration   1: 3,611 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,610 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,582 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,613 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,566 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,584 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,581 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,608 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,597 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,634 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 63,89% complete, ETA 00:11:29
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4,163 ns/op
# Warmup Iteration   2: 4,113 ns/op
# Warmup Iteration   3: 3,623 ns/op
# Warmup Iteration   4: 3,626 ns/op
# Warmup Iteration   5: 3,606 ns/op
Iteration   1: 3,583 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,579 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,574 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,592 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,630 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,639 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,582 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,593 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,569 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,615 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize":
  3,608 ±(99.9%) 0,017 ns/op [Average]
  (min, avg, max) = (3,566, 3,608, 3,654), stdev = 0,025
  CI (99.9%): [3,591, 3,624] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray

# Run progress: 66,67% complete, ETA 00:10:36
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,138 ns/op
# Warmup Iteration   2: 23,079 ns/op
# Warmup Iteration   3: 23,028 ns/op
# Warmup Iteration   4: 22,722 ns/op
# Warmup Iteration   5: 22,738 ns/op
Iteration   1: 22,521 ns/op
                 ·gc.alloc.rate:                   2318,313 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2316,140 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,961 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         27,000 ms

Iteration   2: 22,952 ns/op
                 ·gc.alloc.rate:                   2276,937 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2284,693 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,239 B/op
                 ·gc.churn.PS_Survivor_Space:      0,383 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         26,000 ms

Iteration   3: 22,588 ns/op
                 ·gc.alloc.rate:                   2314,284 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2304,983 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,764 B/op
                 ·gc.churn.PS_Survivor_Space:      0,570 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms

Iteration   4: 23,073 ns/op
                 ·gc.alloc.rate:                   2266,582 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2270,048 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,118 B/op
                 ·gc.churn.PS_Survivor_Space:      0,348 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        112,000 counts
                 ·gc.time:                         25,000 ms

Iteration   5: 22,475 ns/op
                 ·gc.alloc.rate:                   2325,970 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2332,802 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,208 B/op
                 ·gc.churn.PS_Survivor_Space:      0,329 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 22,904 ns/op
                 ·gc.alloc.rate:                   2281,259 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2273,562 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,806 B/op
                 ·gc.churn.PS_Survivor_Space:      0,373 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 22,655 ns/op
                 ·gc.alloc.rate:                   2303,897 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2310,016 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,191 B/op
                 ·gc.churn.PS_Survivor_Space:      0,435 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 22,904 ns/op
                 ·gc.alloc.rate:                   2280,503 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2276,376 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,904 B/op
                 ·gc.churn.PS_Survivor_Space:      0,498 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         25,000 ms

Iteration   9: 22,735 ns/op
                 ·gc.alloc.rate:                   2299,766 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2301,371 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,064 B/op
                 ·gc.churn.PS_Survivor_Space:      0,561 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         26,000 ms

Iteration  10: 22,738 ns/op
                 ·gc.alloc.rate:                   2296,892 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2296,958 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,022 B/op
                 ·gc.churn.PS_Survivor_Space:      0,507 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms


# Run progress: 69,44% complete, ETA 00:09:43
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,906 ns/op
# Warmup Iteration   2: 23,037 ns/op
# Warmup Iteration   3: 22,809 ns/op
# Warmup Iteration   4: 22,849 ns/op
# Warmup Iteration   5: 22,908 ns/op
Iteration   1: 22,586 ns/op
                 ·gc.alloc.rate:                   2311,952 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2323,903 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,351 B/op
                 ·gc.churn.PS_Survivor_Space:      0,293 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         26,000 ms

Iteration   2: 22,845 ns/op
                 ·gc.alloc.rate:                   2286,357 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2281,616 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,888 B/op
                 ·gc.churn.PS_Survivor_Space:      0,578 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        116,000 counts
                 ·gc.time:                         26,000 ms

Iteration   3: 22,859 ns/op
                 ·gc.alloc.rate:                   2287,441 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2287,521 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,023 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 22,901 ns/op
                 ·gc.alloc.rate:                   2285,847 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2294,054 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,252 B/op
                 ·gc.churn.PS_Survivor_Space:      0,303 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
                 ·gc.count:                        126,000 counts
                 ·gc.time:                         27,000 ms

Iteration   5: 22,746 ns/op
                 ·gc.alloc.rate:                   2295,612 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2290,316 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,872 B/op
                 ·gc.churn.PS_Survivor_Space:      0,347 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         26,000 ms

Iteration   6: 22,855 ns/op
                 ·gc.alloc.rate:                   2288,070 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2293,272 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,168 B/op
                 ·gc.churn.PS_Survivor_Space:      0,384 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        127,000 counts
                 ·gc.time:                         28,000 ms

Iteration   7: 22,765 ns/op
                 ·gc.alloc.rate:                   2296,270 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2307,321 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,329 B/op
                 ·gc.churn.PS_Survivor_Space:      0,392 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 22,881 ns/op
                 ·gc.alloc.rate:                   2286,910 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2271,778 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,597 B/op
                 ·gc.churn.PS_Survivor_Space:      0,552 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 22,680 ns/op
                 ·gc.alloc.rate:                   2301,031 MB/sec
                 ·gc.alloc.rate.norm:              64,021 B/op
                 ·gc.churn.PS_Eden_Space:          2306,775 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,180 B/op
                 ·gc.churn.PS_Survivor_Space:      0,569 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         27,000 ms

Iteration  10: 22,708 ns/op
                 ·gc.alloc.rate:                   2302,781 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2300,024 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,944 B/op
                 ·gc.churn.PS_Survivor_Space:      0,401 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         27,000 ms


# Run progress: 72,22% complete, ETA 00:08:50
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,603 ns/op
# Warmup Iteration   2: 23,158 ns/op
# Warmup Iteration   3: 23,214 ns/op
# Warmup Iteration   4: 23,080 ns/op
# Warmup Iteration   5: 23,293 ns/op
Iteration   1: 23,178 ns/op
                 ·gc.alloc.rate:                   2256,767 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2272,694 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,474 B/op
                 ·gc.churn.PS_Survivor_Space:      0,455 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         26,000 ms

Iteration   2: 23,227 ns/op
                 ·gc.alloc.rate:                   2250,975 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2246,326 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,889 B/op
                 ·gc.churn.PS_Survivor_Space:      0,552 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         27,000 ms

Iteration   3: 23,052 ns/op
                 ·gc.alloc.rate:                   2263,377 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2265,030 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,069 B/op
                 ·gc.churn.PS_Survivor_Space:      0,356 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 23,183 ns/op
                 ·gc.alloc.rate:                   2251,879 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2255,650 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,129 B/op
                 ·gc.churn.PS_Survivor_Space:      0,489 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         26,000 ms

Iteration   5: 23,288 ns/op
                 ·gc.alloc.rate:                   2246,745 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2251,208 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,150 B/op
                 ·gc.churn.PS_Survivor_Space:      0,517 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        125,000 counts
                 ·gc.time:                         26,000 ms

Iteration   6: 23,284 ns/op
                 ·gc.alloc.rate:                   2244,001 MB/sec
                 ·gc.alloc.rate.norm:              64,023 B/op
                 ·gc.churn.PS_Eden_Space:          2231,618 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,670 B/op
                 ·gc.churn.PS_Survivor_Space:      0,418 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        130,000 counts
                 ·gc.time:                         27,000 ms

Iteration   7: 23,300 ns/op
                 ·gc.alloc.rate:                   2245,240 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2248,389 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,112 B/op
                 ·gc.churn.PS_Survivor_Space:      0,491 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 23,323 ns/op
                 ·gc.alloc.rate:                   2239,584 MB/sec
                 ·gc.alloc.rate.norm:              64,023 B/op
                 ·gc.churn.PS_Eden_Space:          2245,595 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,195 B/op
                 ·gc.churn.PS_Survivor_Space:      0,516 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        130,000 counts
                 ·gc.time:                         27,000 ms

Iteration   9: 23,094 ns/op
                 ·gc.alloc.rate:                   2266,274 MB/sec
                 ·gc.alloc.rate.norm:              64,020 B/op
                 ·gc.churn.PS_Eden_Space:          2266,063 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,014 B/op
                 ·gc.churn.PS_Survivor_Space:      0,507 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         25,000 ms

Iteration  10: 23,263 ns/op
                 ·gc.alloc.rate:                   2243,241 MB/sec
                 ·gc.alloc.rate.norm:              64,022 B/op
                 ·gc.churn.PS_Eden_Space:          2243,246 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,022 B/op
                 ·gc.churn.PS_Survivor_Space:      0,498 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        125,000 counts
                 ·gc.time:                         26,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray":
  22,919 ±(99.9%) 0,170 ns/op [Average]
  (min, avg, max) = (22,475, 22,919, 23,323), stdev = 0,255
  CI (99.9%): [22,748, 23,089] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate":
  2280,492 ±(99.9%) 16,716 MB/sec [Average]
  (min, avg, max) = (2239,584, 2280,492, 2325,970), stdev = 25,020
  CI (99.9%): [2263,776, 2297,208] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm":
  64,021 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (64,020, 64,021, 64,023), stdev = 0,001
  CI (99.9%): [64,020, 64,022] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space":
  2281,645 ±(99.9%) 17,439 MB/sec [Average]
  (min, avg, max) = (2231,618, 2281,645, 2332,802), stdev = 26,103
  CI (99.9%): [2264,205, 2299,084] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64,053 ±(99.9%) 0,134 B/op [Average]
  (min, avg, max) = (63,597, 64,053, 64,474), stdev = 0,200
  CI (99.9%): [63,920, 64,187] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,450 ±(99.9%) 0,057 MB/sec [Average]
  (min, avg, max) = (0,293, 0,450, 0,578), stdev = 0,086
  CI (99.9%): [0,392, 0,507] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,013 ±(99.9%) 0,002 B/op [Average]
  (min, avg, max) = (0,008, 0,013, 0,016), stdev = 0,002
  CI (99.9%): [0,011, 0,014] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.count":
  3603,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (112,000, 120,100, 130,000), stdev = 4,780
  CI (99.9%): [3603,000, 3603,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.time":
  790,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (25,000, 26,333, 28,000), stdev = 0,711
  CI (99.9%): [790,000, 790,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach

# Run progress: 75,00% complete, ETA 00:07:57
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7,785 ns/op
# Warmup Iteration   2: 7,672 ns/op
# Warmup Iteration   3: 7,722 ns/op
# Warmup Iteration   4: 7,703 ns/op
# Warmup Iteration   5: 7,808 ns/op
Iteration   1: 7,744 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7,802 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7,770 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7,789 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7,772 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7,807 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7,802 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7,852 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7,824 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7,752 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 77,78% complete, ETA 00:07:04
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7,817 ns/op
# Warmup Iteration   2: 7,669 ns/op
# Warmup Iteration   3: 7,759 ns/op
# Warmup Iteration   4: 7,662 ns/op
# Warmup Iteration   5: 7,755 ns/op
Iteration   1: 7,692 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7,748 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7,594 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7,759 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7,673 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7,681 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7,586 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7,675 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7,651 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7,559 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 80,56% complete, ETA 00:06:11
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7,713 ns/op
# Warmup Iteration   2: 7,549 ns/op
# Warmup Iteration   3: 7,754 ns/op
# Warmup Iteration   4: 7,692 ns/op
# Warmup Iteration   5: 7,791 ns/op
Iteration   1: 7,650 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7,745 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7,724 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7,719 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7,632 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7,807 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7,815 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7,697 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7,742 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7,774 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach":
  7,728 ±(99.9%) 0,051 ns/op [Average]
  (min, avg, max) = (7,559, 7,728, 7,852), stdev = 0,076
  CI (99.9%): [7,677, 7,778] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize

# Run progress: 83,33% complete, ETA 00:05:18
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,642 ns/op
# Warmup Iteration   2: 3,577 ns/op
# Warmup Iteration   3: 3,701 ns/op
# Warmup Iteration   4: 3,712 ns/op
# Warmup Iteration   5: 3,710 ns/op
Iteration   1: 3,707 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,678 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,697 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,721 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,703 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,756 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,725 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,675 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,745 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,707 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 86,11% complete, ETA 00:04:25
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,662 ns/op
# Warmup Iteration   2: 3,616 ns/op
# Warmup Iteration   3: 3,565 ns/op
# Warmup Iteration   4: 3,564 ns/op
# Warmup Iteration   5: 3,574 ns/op
Iteration   1: 3,570 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,562 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,554 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,573 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,546 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,566 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,570 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,560 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,575 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,585 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 88,89% complete, ETA 00:03:32
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,710 ns/op
# Warmup Iteration   2: 3,575 ns/op
# Warmup Iteration   3: 3,585 ns/op
# Warmup Iteration   4: 3,571 ns/op
# Warmup Iteration   5: 3,591 ns/op
Iteration   1: 3,592 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,619 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,568 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3,738 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3,633 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3,586 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3,534 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3,647 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3,567 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3,689 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize":
  3,632 ±(99.9%) 0,048 ns/op [Average]
  (min, avg, max) = (3,534, 3,632, 3,756), stdev = 0,072
  CI (99.9%): [3,584, 3,680] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray

# Run progress: 91,67% complete, ETA 00:02:39
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
23,066 ns/op
# Warmup Iteration   2: 20,697 ns/op
# Warmup Iteration   3: 19,140 ns/op
# Warmup Iteration   4: 18,600 ns/op
# Warmup Iteration   5: 19,093 ns/op
Iteration   1: 19,241 ns/op
                 ·gc.alloc.rate:                   2715,199 MB/sec
                 ·gc.alloc.rate.norm:              64,016 B/op
                 ·gc.churn.PS_Eden_Space:          2690,258 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,428 B/op
                 ·gc.churn.PS_Survivor_Space:      0,382 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        107,000 counts
                 ·gc.time:                         25,000 ms

Iteration   2: 18,902 ns/op
                 ·gc.alloc.rate:                   2760,895 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2789,017 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,670 B/op
                 ·gc.churn.PS_Survivor_Space:      0,472 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         28,000 ms

Iteration   3: 19,123 ns/op
                 ·gc.alloc.rate:                   2732,909 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2733,074 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,021 B/op
                 ·gc.churn.PS_Survivor_Space:      0,400 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         27,000 ms

Iteration   4: 19,028 ns/op
                 ·gc.alloc.rate:                   2742,444 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2743,992 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,053 B/op
                 ·gc.churn.PS_Survivor_Space:      0,453 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         28,000 ms

Iteration   5: 18,881 ns/op
                 ·gc.alloc.rate:                   2768,403 MB/sec
                 ·gc.alloc.rate.norm:              64,015 B/op
                 ·gc.churn.PS_Eden_Space:          2769,104 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,031 B/op
                 ·gc.churn.PS_Survivor_Space:      0,321 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
                 ·gc.count:                        104,000 counts
                 ·gc.time:                         24,000 ms

Iteration   6: 19,372 ns/op
                 ·gc.alloc.rate:                   2693,675 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2677,934 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,644 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 18,930 ns/op
                 ·gc.alloc.rate:                   2757,563 MB/sec
                 ·gc.alloc.rate.norm:              64,016 B/op
                 ·gc.churn.PS_Eden_Space:          2765,971 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,211 B/op
                 ·gc.churn.PS_Survivor_Space:      0,444 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        111,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 18,828 ns/op
                 ·gc.alloc.rate:                   2771,817 MB/sec
                 ·gc.alloc.rate.norm:              64,016 B/op
                 ·gc.churn.PS_Eden_Space:          2772,318 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,028 B/op
                 ·gc.churn.PS_Survivor_Space:      0,302 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
                 ·gc.count:                        113,000 counts
                 ·gc.time:                         27,000 ms

Iteration   9: 18,941 ns/op
                 ·gc.alloc.rate:                   2755,044 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2752,658 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,961 B/op
                 ·gc.churn.PS_Survivor_Space:      0,391 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         27,000 ms

Iteration  10: 18,978 ns/op
                 ·gc.alloc.rate:                   2752,800 MB/sec
                 ·gc.alloc.rate.norm:              64,016 B/op
                 ·gc.churn.PS_Eden_Space:          2756,438 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,101 B/op
                 ·gc.churn.PS_Survivor_Space:      0,427 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        114,000 counts
                 ·gc.time:                         26,000 ms


# Run progress: 94,44% complete, ETA 00:01:46
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
23,535 ns/op
# Warmup Iteration   2: 20,810 ns/op
# Warmup Iteration   3: 19,040 ns/op
# Warmup Iteration   4: 19,220 ns/op
# Warmup Iteration   5: 19,366 ns/op
Iteration   1: 19,130 ns/op
                 ·gc.alloc.rate:                   2731,453 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2736,651 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,140 B/op
                 ·gc.churn.PS_Survivor_Space:      0,525 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         28,000 ms

Iteration   2: 19,101 ns/op
                 ·gc.alloc.rate:                   2731,831 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2728,923 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,949 B/op
                 ·gc.churn.PS_Survivor_Space:      0,480 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         26,000 ms

Iteration   3: 19,079 ns/op
                 ·gc.alloc.rate:                   2737,162 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2733,784 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,938 B/op
                 ·gc.churn.PS_Survivor_Space:      0,373 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         28,000 ms

Iteration   4: 19,272 ns/op
                 ·gc.alloc.rate:                   2712,001 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2715,022 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,090 B/op
                 ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
                 ·gc.count:                        128,000 counts
                 ·gc.time:                         26,000 ms

Iteration   5: 18,991 ns/op
                 ·gc.alloc.rate:                   2754,614 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2761,455 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,177 B/op
                 ·gc.churn.PS_Survivor_Space:      0,623 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        123,000 counts
                 ·gc.time:                         28,000 ms

Iteration   6: 19,162 ns/op
                 ·gc.alloc.rate:                   2730,460 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2723,112 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,845 B/op
                 ·gc.churn.PS_Survivor_Space:      0,392 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        118,000 counts
                 ·gc.time:                         26,000 ms

Iteration   7: 19,284 ns/op
                 ·gc.alloc.rate:                   2706,392 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2715,330 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,229 B/op
                 ·gc.churn.PS_Survivor_Space:      0,383 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        119,000 counts
                 ·gc.time:                         26,000 ms

Iteration   8: 19,254 ns/op
                 ·gc.alloc.rate:                   2712,372 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2704,066 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,822 B/op
                 ·gc.churn.PS_Survivor_Space:      0,480 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        124,000 counts
                 ·gc.time:                         28,000 ms

Iteration   9: 19,219 ns/op
                 ·gc.alloc.rate:                   2717,098 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2732,272 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,375 B/op
                 ·gc.churn.PS_Survivor_Space:      0,409 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         26,000 ms

Iteration  10: 19,058 ns/op
                 ·gc.alloc.rate:                   2737,541 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2720,672 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,622 B/op
                 ·gc.churn.PS_Survivor_Space:      0,490 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        115,000 counts
                 ·gc.time:                         26,000 ms


# Run progress: 97,22% complete, ETA 00:00:53
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/courses/dynamicproxies/samples/teachable/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
22,578 ns/op
# Warmup Iteration   2: 20,874 ns/op
# Warmup Iteration   3: 19,306 ns/op
# Warmup Iteration   4: 19,271 ns/op
# Warmup Iteration   5: 19,267 ns/op
Iteration   1: 19,205 ns/op
                 ·gc.alloc.rate:                   2718,235 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2725,321 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,184 B/op
                 ·gc.churn.PS_Survivor_Space:      0,489 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        113,000 counts
                 ·gc.time:                         25,000 ms

Iteration   2: 19,285 ns/op
                 ·gc.alloc.rate:                   2706,352 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2712,435 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,163 B/op
                 ·gc.churn.PS_Survivor_Space:      0,364 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        130,000 counts
                 ·gc.time:                         28,000 ms

Iteration   3: 19,178 ns/op
                 ·gc.alloc.rate:                   2724,439 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2723,031 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,985 B/op
                 ·gc.churn.PS_Survivor_Space:      0,419 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        122,000 counts
                 ·gc.time:                         26,000 ms

Iteration   4: 19,034 ns/op
                 ·gc.alloc.rate:                   2742,442 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2750,699 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,209 B/op
                 ·gc.churn.PS_Survivor_Space:      0,392 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        113,000 counts
                 ·gc.time:                         26,000 ms

Iteration   5: 19,125 ns/op
                 ·gc.alloc.rate:                   2730,858 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2734,454 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,102 B/op
                 ·gc.churn.PS_Survivor_Space:      0,382 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         27,000 ms

Iteration   6: 19,357 ns/op
                 ·gc.alloc.rate:                   2703,847 MB/sec
                 ·gc.alloc.rate.norm:              64,019 B/op
                 ·gc.churn.PS_Eden_Space:          2693,916 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,784 B/op
                 ·gc.churn.PS_Survivor_Space:      0,561 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        126,000 counts
                 ·gc.time:                         27,000 ms

Iteration   7: 19,244 ns/op
                 ·gc.alloc.rate:                   2719,559 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2719,731 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,022 B/op
                 ·gc.churn.PS_Survivor_Space:      0,446 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        121,000 counts
                 ·gc.time:                         27,000 ms

Iteration   8: 19,142 ns/op
                 ·gc.alloc.rate:                   2732,930 MB/sec
                 ·gc.alloc.rate.norm:              64,017 B/op
                 ·gc.churn.PS_Eden_Space:          2736,734 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64,106 B/op
                 ·gc.churn.PS_Survivor_Space:      0,562 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        117,000 counts
                 ·gc.time:                         26,000 ms

Iteration   9: 19,371 ns/op
                 ·gc.alloc.rate:                   2694,482 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2692,549 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,972 B/op
                 ·gc.churn.PS_Survivor_Space:      0,506 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        120,000 counts
                 ·gc.time:                         26,000 ms

Iteration  10: 19,195 ns/op
                 ·gc.alloc.rate:                   2721,108 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          2719,163 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,973 B/op
                 ·gc.churn.PS_Survivor_Space:      0,490 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        127,000 counts
                 ·gc.time:                         28,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray":
  19,130 ±(99.9%) 0,100 ns/op [Average]
  (min, avg, max) = (18,828, 19,130, 19,372), stdev = 0,150
  CI (99.9%): [19,030, 19,230] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate":
  2730,531 ±(99.9%) 14,082 MB/sec [Average]
  (min, avg, max) = (2693,675, 2730,531, 2771,817), stdev = 21,077
  CI (99.9%): [2716,449, 2744,612] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate.norm":
  64,017 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (64,015, 64,017, 64,019), stdev = 0,001
  CI (99.9%): [64,017, 64,018] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space":
  2731,003 ±(99.9%) 17,491 MB/sec [Average]
  (min, avg, max) = (2677,934, 2731,003, 2789,017), stdev = 26,179
  CI (99.9%): [2713,512, 2748,494] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space.norm":
  64,028 ±(99.9%) 0,156 B/op [Average]
  (min, avg, max) = (63,428, 64,028, 64,670), stdev = 0,233
  CI (99.9%): [63,872, 64,183] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space":
  0,437 ±(99.9%) 0,051 MB/sec [Average]
  (min, avg, max) = (0,302, 0,437, 0,623), stdev = 0,076
  CI (99.9%): [0,386, 0,487] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space.norm":
  0,010 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (0,007, 0,010, 0,014), stdev = 0,002
  CI (99.9%): [0,009, 0,011] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.count":
  3557,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (104,000, 118,567, 130,000), stdev = 5,864
  CI (99.9%): [3557,000, 3557,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.time":
  798,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (24,000, 26,600, 28,000), stdev = 1,070
  CI (99.9%): [798,000, 798,000] (assumes normal distribution)


# Run complete. Total time: 00:31:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt     Score    Error   Units
AdapterBenchmark.classAdapterForEach                                           avgt   30     7,710 ±  0,058   ns/op
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate                            avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm                       avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.classAdapterForEach:·gc.count                                 avgt   30       ≈ 0           counts
AdapterBenchmark.classAdapterSize                                              avgt   30     3,567 ±  0,016   ns/op
AdapterBenchmark.classAdapterSize:·gc.alloc.rate                               avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm                          avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.classAdapterSize:·gc.count                                    avgt   30       ≈ 0           counts
AdapterBenchmark.classAdapterToArray                                           avgt   30    22,818 ±  0,477   ns/op
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate                            avgt   30  2292,736 ± 47,525  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm                       avgt   30    64,021 ±  0,001    B/op
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space                   avgt   30  2293,943 ± 47,143  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space.norm              avgt   30    64,056 ±  0,113    B/op
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space               avgt   30     0,456 ±  0,055  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space.norm          avgt   30     0,013 ±  0,002    B/op
AdapterBenchmark.classAdapterToArray:·gc.count                                 avgt   30  3665,000           counts
AdapterBenchmark.classAdapterToArray:·gc.time                                  avgt   30   798,000               ms
AdapterBenchmark.dynamicObjectAdapterForEach                                   avgt   30    18,819 ±  0,814   ns/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate                    avgt   30  1045,596 ± 43,222  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm               avgt   30    24,013 ±  0,001    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space           avgt   30  1046,690 ± 43,669  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space.norm      avgt   30    24,037 ±  0,079    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space       avgt   30     0,131 ±  0,073  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space.norm  avgt   30     0,003 ±  0,002    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.count                         avgt   30  2688,000           counts
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.time                          avgt   30   581,000               ms
AdapterBenchmark.dynamicObjectAdapterSize                                      avgt   30    14,959 ±  0,631   ns/op
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate                       avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm                  avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.dynamicObjectAdapterSize:·gc.count                            avgt   30       ≈ 0           counts
AdapterBenchmark.dynamicObjectAdapterToArray                                   avgt   30    30,045 ±  0,299   ns/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate                    avgt   30  1738,966 ± 17,300  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm               avgt   30    64,027 ±  0,001    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space           avgt   30  1740,109 ± 17,695  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space.norm      avgt   30    64,069 ±  0,123    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space       avgt   30     0,405 ±  0,052  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space.norm  avgt   30     0,015 ±  0,002    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.count                         avgt   30  3551,000           counts
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.time                          avgt   30   777,000               ms
AdapterBenchmark.objectAdapterForEach                                          avgt   30     8,727 ±  0,045   ns/op
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate                           avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm                      avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.objectAdapterForEach:·gc.count                                avgt   30       ≈ 0           counts
AdapterBenchmark.objectAdapterSize                                             avgt   30     3,608 ±  0,017   ns/op
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate                              avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm                         avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.objectAdapterSize:·gc.count                                   avgt   30       ≈ 0           counts
AdapterBenchmark.objectAdapterToArray                                          avgt   30    22,919 ±  0,170   ns/op
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate                           avgt   30  2280,492 ± 16,716  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm                      avgt   30    64,021 ±  0,001    B/op
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space                  avgt   30  2281,645 ± 17,439  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space.norm             avgt   30    64,053 ±  0,134    B/op
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space              avgt   30     0,450 ±  0,057  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space.norm         avgt   30     0,013 ±  0,002    B/op
AdapterBenchmark.objectAdapterToArray:·gc.count                                avgt   30  3603,000           counts
AdapterBenchmark.objectAdapterToArray:·gc.time                                 avgt   30   790,000               ms
AdapterBenchmark.plainForEach                                                  avgt   30     7,728 ±  0,051   ns/op
AdapterBenchmark.plainForEach:·gc.alloc.rate                                   avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.plainForEach:·gc.alloc.rate.norm                              avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.plainForEach:·gc.count                                        avgt   30       ≈ 0           counts
AdapterBenchmark.plainSize                                                     avgt   30     3,632 ±  0,048   ns/op
AdapterBenchmark.plainSize:·gc.alloc.rate                                      avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.plainSize:·gc.alloc.rate.norm                                 avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.plainSize:·gc.count                                           avgt   30       ≈ 0           counts
AdapterBenchmark.plainToArray                                                  avgt   30    19,130 ±  0,100   ns/op
AdapterBenchmark.plainToArray:·gc.alloc.rate                                   avgt   30  2730,531 ± 14,082  MB/sec
AdapterBenchmark.plainToArray:·gc.alloc.rate.norm                              avgt   30    64,017 ±  0,001    B/op
AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space                          avgt   30  2731,003 ± 17,491  MB/sec
AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space.norm                     avgt   30    64,028 ±  0,156    B/op
AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space                      avgt   30     0,437 ±  0,051  MB/sec
AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space.norm                 avgt   30     0,010 ±  0,001    B/op
AdapterBenchmark.plainToArray:·gc.count                                        avgt   30  3557,000           counts
AdapterBenchmark.plainToArray:·gc.time                                         avgt   30   798,000               ms
