# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach

# Run progress: 0,00% complete, ETA 00:01:12
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
16,919 ns/op
# Warmup Iteration   2: 15,770 ns/op
# Warmup Iteration   3: 15,845 ns/op
Iteration   1: 15,734 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15,849 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15,890 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach":
  15,825 ±(99.9%) 1,470 ns/op [Average]
  (min, avg, max) = (15,734, 15,825, 15,890), stdev = 0,081
  CI (99.9%): [14,354, 17,295] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize

# Run progress: 8,33% complete, ETA 00:01:42
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,423 ns/op
# Warmup Iteration   2: 4,118 ns/op
# Warmup Iteration   3: 3,637 ns/op
Iteration   1: 3,658 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,695 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,644 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize":
  3,666 ±(99.9%) 0,475 ns/op [Average]
  (min, avg, max) = (3,644, 3,666, 3,695), stdev = 0,026
  CI (99.9%): [3,191, 4,140] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray

# Run progress: 16,67% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
26,851 ns/op
# Warmup Iteration   2: 22,610 ns/op
# Warmup Iteration   3: 22,031 ns/op
Iteration   1: 22,306 ns/op
                 ·gc.alloc.rate:                   1820,318 MB/sec
                 ·gc.alloc.rate.norm:              64,006 B/op
                 ·gc.churn.PS_Eden_Space:          1748,903 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     61,495 B/op
                 ·gc.churn.PS_Survivor_Space:      0,372 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
                 ·gc.count:                        11,000 counts
                 ·gc.time:                         4,000 ms

Iteration   2: 22,125 ns/op
                 ·gc.alloc.rate:                   1838,041 MB/sec
                 ·gc.alloc.rate.norm:              64,011 B/op
                 ·gc.churn.PS_Eden_Space:          1883,410 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     65,591 B/op
                 ·gc.churn.PS_Survivor_Space:      0,269 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        18,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 22,276 ns/op
                 ·gc.alloc.rate:                   1821,347 MB/sec
                 ·gc.alloc.rate.norm:              64,018 B/op
                 ·gc.churn.PS_Eden_Space:          1859,577 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     65,361 B/op
                 ·gc.churn.PS_Survivor_Space:      0,435 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        30,000 counts
                 ·gc.time:                         8,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray":
  22,236 ±(99.9%) 1,773 ns/op [Average]
  (min, avg, max) = (22,125, 22,236, 22,306), stdev = 0,097
  CI (99.9%): [20,463, 24,009] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate":
  1826,569 ±(99.9%) 181,503 MB/sec [Average]
  (min, avg, max) = (1820,318, 1826,569, 1838,041), stdev = 9,949
  CI (99.9%): [1645,065, 2008,072] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm":
  64,012 ±(99.9%) 0,102 B/op [Average]
  (min, avg, max) = (64,006, 64,012, 64,018), stdev = 0,006
  CI (99.9%): [63,909, 64,114] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space":
  1830,630 ±(99.9%) 1309,421 MB/sec [Average]
  (min, avg, max) = (1748,903, 1830,630, 1883,410), stdev = 71,774
  CI (99.9%): [521,209, 3140,051] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64,149 ±(99.9%) 41,979 B/op [Average]
  (min, avg, max) = (61,495, 64,149, 65,591), stdev = 2,301
  CI (99.9%): [22,170, 106,128] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,359 ±(99.9%) 1,528 MB/sec [Average]
  (min, avg, max) = (0,269, 0,359, 0,435), stdev = 0,084
  CI (99.9%): [≈ 0, 1,887] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,013 ±(99.9%) 0,055 B/op [Average]
  (min, avg, max) = (0,009, 0,013, 0,015), stdev = 0,003
  CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.count":
  59,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (11,000, 19,667, 30,000), stdev = 9,609
  CI (99.9%): [59,000, 59,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.time":
  17,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4,000, 5,667, 8,000), stdev = 2,082
  CI (99.9%): [17,000, 17,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach

# Run progress: 25,00% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
46,900 ns/op
# Warmup Iteration   2: 42,461 ns/op
# Warmup Iteration   3: 42,124 ns/op
Iteration   1: 42,261 ns/op
                 ·gc.alloc.rate:                   840,779 MB/sec
                 ·gc.alloc.rate.norm:              56,018 B/op
                 ·gc.churn.PS_Eden_Space:          812,171 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     54,112 B/op
                 ·gc.churn.PS_Survivor_Space:      0,270 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
                 ·gc.count:                        16,000 counts
                 ·gc.time:                         4,000 ms

Iteration   2: 42,681 ns/op
                 ·gc.alloc.rate:                   833,737 MB/sec
                 ·gc.alloc.rate.norm:              56,024 B/op
                 ·gc.churn.PS_Eden_Space:          836,154 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     56,186 B/op
                 ·gc.churn.PS_Survivor_Space:      0,249 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
                 ·gc.count:                        21,000 counts
                 ·gc.time:                         6,000 ms

Iteration   3: 42,645 ns/op
                 ·gc.alloc.rate:                   834,286 MB/sec
                 ·gc.alloc.rate.norm:              56,029 B/op
                 ·gc.churn.PS_Eden_Space:          852,367 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     57,244 B/op
                 ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
                 ·gc.count:                        27,000 counts
                 ·gc.time:                         7,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach":
  42,529 ±(99.9%) 4,250 ns/op [Average]
  (min, avg, max) = (42,261, 42,529, 42,681), stdev = 0,233
  CI (99.9%): [38,279, 46,779] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate":
  836,267 ±(99.9%) 71,463 MB/sec [Average]
  (min, avg, max) = (833,737, 836,267, 840,779), stdev = 3,917
  CI (99.9%): [764,804, 907,730] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm":
  56,024 ±(99.9%) 0,105 B/op [Average]
  (min, avg, max) = (56,018, 56,024, 56,029), stdev = 0,006
  CI (99.9%): [55,919, 56,128] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space":
  833,564 ±(99.9%) 368,944 MB/sec [Average]
  (min, avg, max) = (812,171, 833,564, 852,367), stdev = 20,223
  CI (99.9%): [464,620, 1202,508] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space.norm":
  55,847 ±(99.9%) 29,066 B/op [Average]
  (min, avg, max) = (54,112, 55,847, 57,244), stdev = 1,593
  CI (99.9%): [26,781, 84,913] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space":
  0,270 ±(99.9%) 0,382 MB/sec [Average]
  (min, avg, max) = (0,249, 0,270, 0,291), stdev = 0,021
  CI (99.9%): [≈ 0, 0,652] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space.norm":
  0,018 ±(99.9%) 0,026 B/op [Average]
  (min, avg, max) = (0,017, 0,018, 0,020), stdev = 0,001
  CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.count":
  64,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (16,000, 21,333, 27,000), stdev = 5,508
  CI (99.9%): [64,000, 64,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.time":
  17,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4,000, 5,667, 7,000), stdev = 1,528
  CI (99.9%): [17,000, 17,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize

# Run progress: 33,33% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,773 ns/op
# Warmup Iteration   2: 14,208 ns/op
# Warmup Iteration   3: 14,296 ns/op
Iteration   1: 14,269 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14,480 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14,410 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize":
  14,386 ±(99.9%) 1,955 ns/op [Average]
  (min, avg, max) = (14,269, 14,386, 14,480), stdev = 0,107
  CI (99.9%): [12,431, 16,342] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray

# Run progress: 41,67% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
41,949 ns/op
# Warmup Iteration   2: 34,037 ns/op
# Warmup Iteration   3: 32,934 ns/op
Iteration   1: 33,023 ns/op
                 ·gc.alloc.rate:                   1540,140 MB/sec
                 ·gc.alloc.rate.norm:              80,007 B/op
                 ·gc.churn.PS_Eden_Space:          1581,069 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     82,133 B/op
                 ·gc.churn.PS_Survivor_Space:      0,207 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
                 ·gc.count:                        8,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 33,341 ns/op
                 ·gc.alloc.rate:                   1524,586 MB/sec
                 ·gc.alloc.rate.norm:              80,010 B/op
                 ·gc.churn.PS_Eden_Space:          1600,200 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     83,978 B/op
                 ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
                 ·gc.count:                        11,000 counts
                 ·gc.time:                         3,000 ms

Iteration   3: 33,022 ns/op
                 ·gc.alloc.rate:                   1537,161 MB/sec
                 ·gc.alloc.rate.norm:              80,013 B/op
                 ·gc.churn.PS_Eden_Space:          1499,054 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     78,029 B/op
                 ·gc.churn.PS_Survivor_Space:      0,165 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        15,000 counts
                 ·gc.time:                         4,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray":
  33,129 ±(99.9%) 3,356 ns/op [Average]
  (min, avg, max) = (33,022, 33,129, 33,341), stdev = 0,184
  CI (99.9%): [29,772, 36,485] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate":
  1533,962 ±(99.9%) 150,618 MB/sec [Average]
  (min, avg, max) = (1524,586, 1533,962, 1540,140), stdev = 8,256
  CI (99.9%): [1383,344, 1684,581] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm":
  80,010 ±(99.9%) 0,056 B/op [Average]
  (min, avg, max) = (80,007, 80,010, 80,013), stdev = 0,003
  CI (99.9%): [79,954, 80,066] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space":
  1560,108 ±(99.9%) 980,286 MB/sec [Average]
  (min, avg, max) = (1499,054, 1560,108, 1600,200), stdev = 53,733
  CI (99.9%): [579,821, 2540,394] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  81,380 ±(99.9%) 55,550 B/op [Average]
  (min, avg, max) = (78,029, 81,380, 83,978), stdev = 3,045
  CI (99.9%): [25,830, 136,930] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,214 ±(99.9%) 0,966 MB/sec [Average]
  (min, avg, max) = (0,165, 0,214, 0,271), stdev = 0,053
  CI (99.9%): [≈ 0, 1,180] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,011 ±(99.9%) 0,051 B/op [Average]
  (min, avg, max) = (0,009, 0,011, 0,014), stdev = 0,003
  CI (99.9%): [≈ 0, 0,063] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.count":
  34,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (8,000, 11,333, 15,000), stdev = 3,512
  CI (99.9%): [34,000, 34,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.time":
  9,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
  CI (99.9%): [9,000, 9,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach

# Run progress: 50,00% complete, ETA 00:00:56
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
18,294 ns/op
# Warmup Iteration   2: 17,279 ns/op
# Warmup Iteration   3: 17,109 ns/op
Iteration   1: 16,928 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16,959 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 17,125 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach":
  17,004 ±(99.9%) 1,931 ns/op [Average]
  (min, avg, max) = (16,928, 17,004, 17,125), stdev = 0,106
  CI (99.9%): [15,072, 18,935] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize

# Run progress: 58,33% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.lang.Iterable
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,941 ns/op
# Warmup Iteration   2: 4,737 ns/op
# Warmup Iteration   3: 4,262 ns/op
Iteration   1: 4,251 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,239 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,281 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize":
  4,257 ±(99.9%) 0,397 ns/op [Average]
  (min, avg, max) = (4,239, 4,257, 4,281), stdev = 0,022
  CI (99.9%): [3,860, 4,655] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray

# Run progress: 66,67% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.lang.Iterable
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
26,564 ns/op
# Warmup Iteration   2: 26,269 ns/op
# Warmup Iteration   3: 21,802 ns/op
Iteration   1: 21,792 ns/op
                 ·gc.alloc.rate:                   1863,436 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2041,606 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     70,123 B/op
                 ·gc.churn.PS_Survivor_Space:      0,124 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
                 ·gc.count:                        4,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 21,859 ns/op
                 ·gc.alloc.rate:                   1859,196 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2106,256 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     72,508 B/op
                 ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         1,000 ms

Iteration   3: 22,093 ns/op
                 ·gc.alloc.rate:                   1843,945 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          1716,455 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     59,578 B/op
                 ·gc.churn.PS_Survivor_Space:      0,145 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray":
  21,915 ±(99.9%) 2,879 ns/op [Average]
  (min, avg, max) = (21,792, 21,915, 22,093), stdev = 0,158
  CI (99.9%): [19,036, 24,794] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate":
  1855,526 ±(99.9%) 187,012 MB/sec [Average]
  (min, avg, max) = (1843,945, 1855,526, 1863,436), stdev = 10,251
  CI (99.9%): [1668,514, 2042,537] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm":
  64,003 ±(99.9%) 0,002 B/op [Average]
  (min, avg, max) = (64,003, 64,003, 64,003), stdev = 0,001
  CI (99.9%): [64,001, 64,005] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space":
  1954,772 ±(99.9%) 3811,209 MB/sec [Average]
  (min, avg, max) = (1716,455, 1954,772, 2106,256), stdev = 208,905
  CI (99.9%): [≈ 0, 5765,981] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  67,403 ±(99.9%) 125,532 B/op [Average]
  (min, avg, max) = (59,578, 67,403, 72,508), stdev = 6,881
  CI (99.9%): [≈ 0, 192,934] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,145 ±(99.9%) 0,379 MB/sec [Average]
  (min, avg, max) = (0,124, 0,145, 0,166), stdev = 0,021
  CI (99.9%): [≈ 0, 0,524] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,005 ±(99.9%) 0,013 B/op [Average]
  (min, avg, max) = (0,004, 0,005, 0,006), stdev = 0,001
  CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.count":
  14,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (4,000, 4,667, 5,000), stdev = 0,577
  CI (99.9%): [14,000, 14,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.time":
  5,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (1,000, 1,667, 2,000), stdev = 0,577
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach

# Run progress: 75,00% complete, ETA 00:00:28
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
16,732 ns/op
# Warmup Iteration   2: 14,833 ns/op
# Warmup Iteration   3: 15,650 ns/op
Iteration   1: 15,704 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15,687 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15,628 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach":
  15,673 ±(99.9%) 0,723 ns/op [Average]
  (min, avg, max) = (15,628, 15,673, 15,704), stdev = 0,040
  CI (99.9%): [14,951, 16,396] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize

# Run progress: 83,33% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.lang.Iterable
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,462 ns/op
# Warmup Iteration   2: 4,147 ns/op
# Warmup Iteration   3: 3,400 ns/op
Iteration   1: 3,436 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,424 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,418 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize":
  3,426 ±(99.9%) 0,173 ns/op [Average]
  (min, avg, max) = (3,418, 3,426, 3,436), stdev = 0,009
  CI (99.9%): [3,253, 3,599] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray

# Run progress: 91,67% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,074 ns/op
# Warmup Iteration   2: 23,069 ns/op
# Warmup Iteration   3: 18,216 ns/op
Iteration   1: 18,041 ns/op
                 ·gc.alloc.rate:                   2248,781 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2295,501 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     65,333 B/op
                 ·gc.churn.PS_Survivor_Space:      0,228 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 18,155 ns/op
                 ·gc.alloc.rate:                   2234,395 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2189,104 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     62,706 B/op
                 ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
                 ·gc.count:                        6,000 counts
                 ·gc.time:                         2,000 ms

Iteration   3: 18,221 ns/op
                 ·gc.alloc.rate:                   2228,418 MB/sec
                 ·gc.alloc.rate.norm:              64,004 B/op
                 ·gc.churn.PS_Eden_Space:          2208,194 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,423 B/op
                 ·gc.churn.PS_Survivor_Space:      0,186 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
                 ·gc.count:                        8,000 counts
                 ·gc.time:                         2,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray":
  18,139 ±(99.9%) 1,663 ns/op [Average]
  (min, avg, max) = (18,041, 18,139, 18,221), stdev = 0,091
  CI (99.9%): [16,476, 19,802] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate":
  2237,198 ±(99.9%) 190,953 MB/sec [Average]
  (min, avg, max) = (2228,418, 2237,198, 2248,781), stdev = 10,467
  CI (99.9%): [2046,245, 2428,151] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate.norm":
  64,003 ±(99.9%) 0,010 B/op [Average]
  (min, avg, max) = (64,003, 64,003, 64,004), stdev = 0,001
  CI (99.9%): [63,994, 64,013] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space":
  2230,933 ±(99.9%) 1034,899 MB/sec [Average]
  (min, avg, max) = (2189,104, 2230,933, 2295,501), stdev = 56,726
  CI (99.9%): [1196,034, 3265,832] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space.norm":
  63,820 ±(99.9%) 24,774 B/op [Average]
  (min, avg, max) = (62,706, 63,820, 65,333), stdev = 1,358
  CI (99.9%): [39,047, 88,594] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space":
  0,193 ±(99.9%) 0,578 MB/sec [Average]
  (min, avg, max) = (0,166, 0,193, 0,228), stdev = 0,032
  CI (99.9%): [≈ 0, 0,771] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space.norm":
  0,006 ±(99.9%) 0,016 B/op [Average]
  (min, avg, max) = (0,005, 0,006, 0,006), stdev = 0,001
  CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.count":
  19,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (5,000, 6,333, 8,000), stdev = 1,528
  CI (99.9%): [19,000, 19,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.time":
  6,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
  CI (99.9%): [6,000, 6,000] (assumes normal distribution)


# Run complete. Total time: 00:01:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt     Score      Error   Units
AdapterBenchmark.plainSize:·gc.alloc.rate                                      avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.plainSize:·gc.alloc.rate.norm                                 avgt    3    ≈ 10⁻⁶               B/op
AdapterBenchmark.classAdapterSize:·gc.alloc.rate                               avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm                          avgt    3    ≈ 10⁻⁶               B/op
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate                              avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm                         avgt    3    ≈ 10⁻⁶               B/op
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate                       avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm                  avgt    3    ≈ 10⁻⁵               B/op
AdapterBenchmark.plainToArray:·gc.alloc.rate                                   avgt    3  2237,198 ±  190,953  MB/sec
AdapterBenchmark.plainToArray:·gc.alloc.rate.norm                              avgt    3    64,003 ±    0,010    B/op
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate                            avgt    3  1826,569 ±  181,503  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm                       avgt    3    64,012 ±    0,102    B/op
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate                           avgt    3  1855,526 ±  187,012  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm                      avgt    3    64,003 ±    0,002    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate                    avgt    3  1533,962 ±  150,618  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm               avgt    3    80,010 ±    0,056    B/op
AdapterBenchmark.plainForEach:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.plainForEach:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁵               B/op
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate                            avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm                       avgt    3    ≈ 10⁻⁵               B/op
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate                           avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm                      avgt    3    ≈ 10⁻⁵               B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate                    avgt    3   836,267 ±   71,463  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm               avgt    3    56,024 ±    0,105    B/op


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach

# Run progress: 0,00% complete, ETA 00:01:12
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
20,162 ns/op
# Warmup Iteration   2: 18,490 ns/op
# Warmup Iteration   3: 17,675 ns/op
Iteration   1: 17,750 ns/op
                 ·gc.alloc.rate:                   1145,197 MB/sec
                 ·gc.alloc.rate.norm:              32,007 B/op
                 ·gc.churn.PS_Eden_Space:          1190,921 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     33,285 B/op
                 ·gc.churn.PS_Survivor_Space:      0,332 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        15,000 counts
                 ·gc.time:                         5,000 ms

Iteration   2: 17,894 ns/op
                 ·gc.alloc.rate:                   1134,509 MB/sec
                 ·gc.alloc.rate.norm:              32,009 B/op
                 ·gc.churn.PS_Eden_Space:          1124,319 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     31,722 B/op
                 ·gc.churn.PS_Survivor_Space:      0,352 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        20,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 17,772 ns/op
                 ·gc.alloc.rate:                   1143,372 MB/sec
                 ·gc.alloc.rate.norm:              32,014 B/op
                 ·gc.churn.PS_Eden_Space:          1165,924 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     32,645 B/op
                 ·gc.churn.PS_Survivor_Space:      0,603 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
                 ·gc.count:                        29,000 counts
                 ·gc.time:                         8,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach":
  17,805 ±(99.9%) 1,412 ns/op [Average]
  (min, avg, max) = (17,750, 17,805, 17,894), stdev = 0,077
  CI (99.9%): [16,393, 19,217] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate":
  1141,026 ±(99.9%) 104,300 MB/sec [Average]
  (min, avg, max) = (1134,509, 1141,026, 1145,197), stdev = 5,717
  CI (99.9%): [1036,726, 1245,326] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm":
  32,010 ±(99.9%) 0,061 B/op [Average]
  (min, avg, max) = (32,007, 32,010, 32,014), stdev = 0,003
  CI (99.9%): [31,949, 32,071] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.churn.PS_Eden_Space":
  1160,388 ±(99.9%) 613,794 MB/sec [Average]
  (min, avg, max) = (1124,319, 1160,388, 1190,921), stdev = 33,644
  CI (99.9%): [546,594, 1774,182] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.churn.PS_Eden_Space.norm":
  32,551 ±(99.9%) 14,336 B/op [Average]
  (min, avg, max) = (31,722, 32,551, 33,285), stdev = 0,786
  CI (99.9%): [18,215, 46,886] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.churn.PS_Survivor_Space":
  0,429 ±(99.9%) 2,752 MB/sec [Average]
  (min, avg, max) = (0,332, 0,429, 0,603), stdev = 0,151
  CI (99.9%): [≈ 0, 3,181] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.churn.PS_Survivor_Space.norm":
  0,012 ±(99.9%) 0,077 B/op [Average]
  (min, avg, max) = (0,009, 0,012, 0,017), stdev = 0,004
  CI (99.9%): [≈ 0, 0,089] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.count":
  64,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (15,000, 21,333, 29,000), stdev = 7,095
  CI (99.9%): [64,000, 64,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.time":
  18,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5,000, 6,000, 8,000), stdev = 1,732
  CI (99.9%): [18,000, 18,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize

# Run progress: 8,33% complete, ETA 00:01:42
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,441 ns/op
# Warmup Iteration   2: 4,099 ns/op
# Warmup Iteration   3: 3,629 ns/op
Iteration   1: 3,712 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,720 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,641 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize":
  3,691 ±(99.9%) 0,790 ns/op [Average]
  (min, avg, max) = (3,641, 3,691, 3,720), stdev = 0,043
  CI (99.9%): [2,900, 4,481] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray

# Run progress: 16,67% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
27,452 ns/op
# Warmup Iteration   2: 22,187 ns/op
# Warmup Iteration   3: 22,160 ns/op
Iteration   1: 22,459 ns/op
                 ·gc.alloc.rate:                   1807,777 MB/sec
                 ·gc.alloc.rate.norm:              64,007 B/op
                 ·gc.churn.PS_Eden_Space:          1749,439 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     61,941 B/op
                 ·gc.churn.PS_Survivor_Space:      0,290 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        11,000 counts
                 ·gc.time:                         3,000 ms

Iteration   2: 22,068 ns/op
                 ·gc.alloc.rate:                   1841,096 MB/sec
                 ·gc.alloc.rate.norm:              64,011 B/op
                 ·gc.churn.PS_Eden_Space:          1888,956 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     65,675 B/op
                 ·gc.churn.PS_Survivor_Space:      0,353 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        18,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 22,189 ns/op
                 ·gc.alloc.rate:                   1829,065 MB/sec
                 ·gc.alloc.rate.norm:              64,016 B/op
                 ·gc.churn.PS_Eden_Space:          1803,568 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,124 B/op
                 ·gc.churn.PS_Survivor_Space:      0,456 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
                 ·gc.count:                        28,000 counts
                 ·gc.time:                         8,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray":
  22,239 ±(99.9%) 3,650 ns/op [Average]
  (min, avg, max) = (22,068, 22,239, 22,459), stdev = 0,200
  CI (99.9%): [18,588, 25,889] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate":
  1825,979 ±(99.9%) 307,811 MB/sec [Average]
  (min, avg, max) = (1807,777, 1825,979, 1841,096), stdev = 16,872
  CI (99.9%): [1518,168, 2133,791] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm":
  64,011 ±(99.9%) 0,091 B/op [Average]
  (min, avg, max) = (64,007, 64,011, 64,016), stdev = 0,005
  CI (99.9%): [63,920, 64,102] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space":
  1813,988 ±(99.9%) 1283,259 MB/sec [Average]
  (min, avg, max) = (1749,439, 1813,988, 1888,956), stdev = 70,340
  CI (99.9%): [530,729, 3097,246] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  63,580 ±(99.9%) 34,810 B/op [Average]
  (min, avg, max) = (61,941, 63,580, 65,675), stdev = 1,908
  CI (99.9%): [28,770, 98,390] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,366 ±(99.9%) 1,527 MB/sec [Average]
  (min, avg, max) = (0,290, 0,366, 0,456), stdev = 0,084
  CI (99.9%): [≈ 0, 1,893] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,013 ±(99.9%) 0,053 B/op [Average]
  (min, avg, max) = (0,010, 0,013, 0,016), stdev = 0,003
  CI (99.9%): [≈ 0, 0,065] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.count":
  57,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (11,000, 19,000, 28,000), stdev = 8,544
  CI (99.9%): [57,000, 57,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.time":
  16,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (3,000, 5,333, 8,000), stdev = 2,517
  CI (99.9%): [16,000, 16,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach

# Run progress: 25,00% complete, ETA 00:01:23
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
47,189 ns/op
# Warmup Iteration   2: 41,831 ns/op
# Warmup Iteration   3: 41,271 ns/op
Iteration   1: 41,139 ns/op
                 ·gc.alloc.rate:                   864,129 MB/sec
                 ·gc.alloc.rate.norm:              56,019 B/op
                 ·gc.churn.PS_Eden_Space:          858,404 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     55,647 B/op
                 ·gc.churn.PS_Survivor_Space:      0,436 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
                 ·gc.count:                        17,000 counts
                 ·gc.time:                         5,000 ms

Iteration   2: 41,218 ns/op
                 ·gc.alloc.rate:                   862,720 MB/sec
                 ·gc.alloc.rate.norm:              56,024 B/op
                 ·gc.churn.PS_Eden_Space:          864,044 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     56,110 B/op
                 ·gc.churn.PS_Survivor_Space:      0,228 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
                 ·gc.count:                        22,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 41,297 ns/op
                 ·gc.alloc.rate:                   860,260 MB/sec
                 ·gc.alloc.rate.norm:              56,032 B/op
                 ·gc.churn.PS_Eden_Space:          886,765 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     57,758 B/op
                 ·gc.churn.PS_Survivor_Space:      0,476 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
                 ·gc.count:                        29,000 counts
                 ·gc.time:                         8,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach":
  41,218 ±(99.9%) 1,440 ns/op [Average]
  (min, avg, max) = (41,139, 41,218, 41,297), stdev = 0,079
  CI (99.9%): [39,779, 42,658] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate":
  862,369 ±(99.9%) 35,725 MB/sec [Average]
  (min, avg, max) = (860,260, 862,369, 864,129), stdev = 1,958
  CI (99.9%): [826,644, 898,094] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm":
  56,025 ±(99.9%) 0,120 B/op [Average]
  (min, avg, max) = (56,019, 56,025, 56,032), stdev = 0,007
  CI (99.9%): [55,905, 56,145] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space":
  869,738 ±(99.9%) 273,894 MB/sec [Average]
  (min, avg, max) = (858,404, 869,738, 886,765), stdev = 15,013
  CI (99.9%): [595,844, 1143,632] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space.norm":
  56,505 ±(99.9%) 20,239 B/op [Average]
  (min, avg, max) = (55,647, 56,505, 57,758), stdev = 1,109
  CI (99.9%): [36,266, 76,744] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space":
  0,380 ±(99.9%) 2,425 MB/sec [Average]
  (min, avg, max) = (0,228, 0,380, 0,476), stdev = 0,133
  CI (99.9%): [≈ 0, 2,806] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space.norm":
  0,025 ±(99.9%) 0,158 B/op [Average]
  (min, avg, max) = (0,015, 0,025, 0,031), stdev = 0,009
  CI (99.9%): [≈ 0, 0,183] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.count":
  68,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (17,000, 22,667, 29,000), stdev = 6,028
  CI (99.9%): [68,000, 68,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.time":
  18,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5,000, 6,000, 8,000), stdev = 1,732
  CI (99.9%): [18,000, 18,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize

# Run progress: 33,33% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,069 ns/op
# Warmup Iteration   2: 14,284 ns/op
# Warmup Iteration   3: 14,251 ns/op
Iteration   1: 15,849 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14,211 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14,237 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize":
  14,766 ±(99.9%) 17,116 ns/op [Average]
  (min, avg, max) = (14,211, 14,766, 15,849), stdev = 0,938
  CI (99.9%): [≈ 0, 31,881] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray

# Run progress: 41,67% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
41,549 ns/op
# Warmup Iteration   2: 34,701 ns/op
# Warmup Iteration   3: 34,075 ns/op
Iteration   1: 33,997 ns/op
                 ·gc.alloc.rate:                   1496,373 MB/sec
                 ·gc.alloc.rate.norm:              80,006 B/op
                 ·gc.churn.PS_Eden_Space:          1411,539 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     75,470 B/op
                 ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        7,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 34,315 ns/op
                 ·gc.alloc.rate:                   1478,728 MB/sec
                 ·gc.alloc.rate.norm:              80,010 B/op
                 ·gc.churn.PS_Eden_Space:          1641,722 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     88,829 B/op
                 ·gc.churn.PS_Survivor_Space:      0,352 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
                 ·gc.count:                        11,000 counts
                 ·gc.time:                         3,000 ms

Iteration   3: 34,386 ns/op
                 ·gc.alloc.rate:                   1474,156 MB/sec
                 ·gc.alloc.rate.norm:              80,013 B/op
                 ·gc.churn.PS_Eden_Space:          1457,620 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     79,115 B/op
                 ·gc.churn.PS_Survivor_Space:      0,311 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
                 ·gc.count:                        14,000 counts
                 ·gc.time:                         4,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray":
  34,233 ±(99.9%) 3,787 ns/op [Average]
  (min, avg, max) = (33,997, 34,233, 34,386), stdev = 0,208
  CI (99.9%): [30,446, 38,019] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate":
  1483,086 ±(99.9%) 214,035 MB/sec [Average]
  (min, avg, max) = (1474,156, 1483,086, 1496,373), stdev = 11,732
  CI (99.9%): [1269,051, 1697,120] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm":
  80,010 ±(99.9%) 0,059 B/op [Average]
  (min, avg, max) = (80,006, 80,010, 80,013), stdev = 0,003
  CI (99.9%): [79,951, 80,069] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space":
  1503,627 ±(99.9%) 2221,963 MB/sec [Average]
  (min, avg, max) = (1411,539, 1503,627, 1641,722), stdev = 121,793
  CI (99.9%): [≈ 0, 3725,590] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  81,138 ±(99.9%) 125,978 B/op [Average]
  (min, avg, max) = (75,470, 81,138, 88,829), stdev = 6,905
  CI (99.9%): [≈ 0, 207,117] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,283 ±(99.9%) 1,564 MB/sec [Average]
  (min, avg, max) = (0,187, 0,283, 0,352), stdev = 0,086
  CI (99.9%): [≈ 0, 1,848] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,015 ±(99.9%) 0,086 B/op [Average]
  (min, avg, max) = (0,010, 0,015, 0,019), stdev = 0,005
  CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.count":
  32,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (7,000, 10,667, 14,000), stdev = 3,512
  CI (99.9%): [32,000, 32,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.time":
  9,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
  CI (99.9%): [9,000, 9,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach

# Run progress: 50,00% complete, ETA 00:00:55
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21,226 ns/op
# Warmup Iteration   2: 19,654 ns/op
# Warmup Iteration   3: 19,106 ns/op
Iteration   1: 19,139 ns/op
                 ·gc.alloc.rate:                   1061,405 MB/sec
                 ·gc.alloc.rate.norm:              32,006 B/op
                 ·gc.churn.PS_Eden_Space:          1053,568 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     31,770 B/op
                 ·gc.churn.PS_Survivor_Space:      0,207 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
                 ·gc.count:                        12,000 counts
                 ·gc.time:                         4,000 ms

Iteration   2: 19,049 ns/op
                 ·gc.alloc.rate:                   1064,525 MB/sec
                 ·gc.alloc.rate.norm:              32,008 B/op
                 ·gc.churn.PS_Eden_Space:          1041,119 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     31,304 B/op
                 ·gc.churn.PS_Survivor_Space:      0,415 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
                 ·gc.count:                        16,000 counts
                 ·gc.time:                         4,000 ms

Iteration   3: 19,230 ns/op
                 ·gc.alloc.rate:                   1058,166 MB/sec
                 ·gc.alloc.rate.norm:              32,012 B/op
                 ·gc.churn.PS_Eden_Space:          1079,545 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     32,658 B/op
                 ·gc.churn.PS_Survivor_Space:      0,290 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
                 ·gc.count:                        23,000 counts
                 ·gc.time:                         7,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach":
  19,139 ±(99.9%) 1,649 ns/op [Average]
  (min, avg, max) = (19,049, 19,139, 19,230), stdev = 0,090
  CI (99.9%): [17,491, 20,788] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate":
  1061,366 ±(99.9%) 58,013 MB/sec [Average]
  (min, avg, max) = (1058,166, 1061,366, 1064,525), stdev = 3,180
  CI (99.9%): [1003,352, 1119,379] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm":
  32,009 ±(99.9%) 0,052 B/op [Average]
  (min, avg, max) = (32,006, 32,009, 32,012), stdev = 0,003
  CI (99.9%): [31,957, 32,060] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.churn.PS_Eden_Space":
  1058,077 ±(99.9%) 357,677 MB/sec [Average]
  (min, avg, max) = (1041,119, 1058,077, 1079,545), stdev = 19,605
  CI (99.9%): [700,401, 1415,754] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.churn.PS_Eden_Space.norm":
  31,911 ±(99.9%) 12,551 B/op [Average]
  (min, avg, max) = (31,304, 31,911, 32,658), stdev = 0,688
  CI (99.9%): [19,359, 44,462] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.churn.PS_Survivor_Space":
  0,304 ±(99.9%) 1,904 MB/sec [Average]
  (min, avg, max) = (0,207, 0,304, 0,415), stdev = 0,104
  CI (99.9%): [≈ 0, 2,208] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.churn.PS_Survivor_Space.norm":
  0,009 ±(99.9%) 0,057 B/op [Average]
  (min, avg, max) = (0,006, 0,009, 0,012), stdev = 0,003
  CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.count":
  51,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (12,000, 17,000, 23,000), stdev = 5,568
  CI (99.9%): [51,000, 51,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.time":
  15,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4,000, 5,000, 7,000), stdev = 1,732
  CI (99.9%): [15,000, 15,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize

# Run progress: 58,33% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,979 ns/op
# Warmup Iteration   2: 4,798 ns/op
# Warmup Iteration   3: 4,279 ns/op
Iteration   1: 4,258 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,282 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,251 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize":
  4,264 ±(99.9%) 0,298 ns/op [Average]
  (min, avg, max) = (4,251, 4,264, 4,282), stdev = 0,016
  CI (99.9%): [3,966, 4,562] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray

# Run progress: 66,67% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.lang.Iterable
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
26,221 ns/op
# Warmup Iteration   2: 26,277 ns/op
# Warmup Iteration   3: 21,773 ns/op
Iteration   1: 21,572 ns/op
                 ·gc.alloc.rate:                   1881,314 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2043,231 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     69,512 B/op
                 ·gc.churn.PS_Survivor_Space:      0,145 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
                 ·gc.count:                        4,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 22,059 ns/op
                 ·gc.alloc.rate:                   1841,755 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2114,659 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     73,487 B/op
                 ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         1,000 ms

Iteration   3: 21,803 ns/op
                 ·gc.alloc.rate:                   1861,632 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          1712,125 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     58,863 B/op
                 ·gc.churn.PS_Survivor_Space:      0,145 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray":
  21,811 ±(99.9%) 4,451 ns/op [Average]
  (min, avg, max) = (21,572, 21,811, 22,059), stdev = 0,244
  CI (99.9%): [17,360, 26,263] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate":
  1861,567 ±(99.9%) 360,852 MB/sec [Average]
  (min, avg, max) = (1841,755, 1861,567, 1881,314), stdev = 19,780
  CI (99.9%): [1500,715, 2222,419] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm":
  64,003 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (64,003, 64,003, 64,003), stdev = 0,001
  CI (99.9%): [64,002, 64,004] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space":
  1956,672 ±(99.9%) 3918,277 MB/sec [Average]
  (min, avg, max) = (1712,125, 1956,672, 2114,659), stdev = 214,774
  CI (99.9%): [≈ 0, 5874,949] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  67,287 ±(99.9%) 137,949 B/op [Average]
  (min, avg, max) = (58,863, 67,287, 73,487), stdev = 7,561
  CI (99.9%): [≈ 0, 205,236] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0,166 ±(99.9%) 0,663 MB/sec [Average]
  (min, avg, max) = (0,145, 0,166, 0,208), stdev = 0,036
  CI (99.9%): [≈ 0, 0,829] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0,006 ±(99.9%) 0,024 B/op [Average]
  (min, avg, max) = (0,005, 0,006, 0,007), stdev = 0,001
  CI (99.9%): [≈ 0, 0,030] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.count":
  14,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (4,000, 4,667, 5,000), stdev = 0,577
  CI (99.9%): [14,000, 14,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.time":
  5,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (1,000, 1,667, 2,000), stdev = 0,577
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach

# Run progress: 75,00% complete, ETA 00:00:27
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19,815 ns/op
# Warmup Iteration   2: 18,999 ns/op
# Warmup Iteration   3: 18,364 ns/op
Iteration   1: 18,473 ns/op
                 ·gc.alloc.rate:                   1098,132 MB/sec
                 ·gc.alloc.rate.norm:              32,007 B/op
                 ·gc.churn.PS_Eden_Space:          1120,611 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     32,662 B/op
                 ·gc.churn.PS_Survivor_Space:      0,332 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        14,000 counts
                 ·gc.time:                         5,000 ms

Iteration   2: 18,348 ns/op
                 ·gc.alloc.rate:                   1108,900 MB/sec
                 ·gc.alloc.rate.norm:              32,009 B/op
                 ·gc.churn.PS_Eden_Space:          1097,164 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     31,670 B/op
                 ·gc.churn.PS_Survivor_Space:      0,352 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        19,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 18,573 ns/op
                 ·gc.alloc.rate:                   1092,614 MB/sec
                 ·gc.alloc.rate.norm:              32,013 B/op
                 ·gc.churn.PS_Eden_Space:          1117,713 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     32,749 B/op
                 ·gc.churn.PS_Survivor_Space:      0,269 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
                 ·gc.count:                        27,000 counts
                 ·gc.time:                         7,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach":
  18,465 ±(99.9%) 2,059 ns/op [Average]
  (min, avg, max) = (18,348, 18,465, 18,573), stdev = 0,113
  CI (99.9%): [16,406, 20,523] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate":
  1099,882 ±(99.9%) 151,110 MB/sec [Average]
  (min, avg, max) = (1092,614, 1099,882, 1108,900), stdev = 8,283
  CI (99.9%): [948,772, 1250,992] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate.norm":
  32,010 ±(99.9%) 0,059 B/op [Average]
  (min, avg, max) = (32,007, 32,010, 32,013), stdev = 0,003
  CI (99.9%): [31,951, 32,069] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.churn.PS_Eden_Space":
  1111,829 ±(99.9%) 233,202 MB/sec [Average]
  (min, avg, max) = (1097,164, 1111,829, 1120,611), stdev = 12,783
  CI (99.9%): [878,627, 1345,032] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.churn.PS_Eden_Space.norm":
  32,360 ±(99.9%) 10,929 B/op [Average]
  (min, avg, max) = (31,670, 32,360, 32,749), stdev = 0,599
  CI (99.9%): [21,431, 43,290] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.churn.PS_Survivor_Space":
  0,318 ±(99.9%) 0,789 MB/sec [Average]
  (min, avg, max) = (0,269, 0,318, 0,352), stdev = 0,043
  CI (99.9%): [≈ 0, 1,106] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.churn.PS_Survivor_Space.norm":
  0,009 ±(99.9%) 0,022 B/op [Average]
  (min, avg, max) = (0,008, 0,009, 0,010), stdev = 0,001
  CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.count":
  60,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (14,000, 20,000, 27,000), stdev = 6,557
  CI (99.9%): [60,000, 60,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.time":
  17,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5,000, 5,667, 7,000), stdev = 1,155
  CI (99.9%): [17,000, 17,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize

# Run progress: 83,33% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,517 ns/op
# Warmup Iteration   2: 4,111 ns/op
# Warmup Iteration   3: 3,415 ns/op
Iteration   1: 3,402 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,448 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,416 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize":
  3,422 ±(99.9%) 0,432 ns/op [Average]
  (min, avg, max) = (3,402, 3,422, 3,448), stdev = 0,024
  CI (99.9%): [2,990, 3,854] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray

# Run progress: 91,67% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.VTable (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to interface java.util.Collection
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.VTable
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
25,073 ns/op
# Warmup Iteration   2: 23,941 ns/op
# Warmup Iteration   3: 20,514 ns/op
Iteration   1: 20,727 ns/op
                 ·gc.alloc.rate:                   1959,365 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          1959,148 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,996 B/op
                 ·gc.churn.PS_Survivor_Space:      0,249 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
                 ·gc.count:                        4,000 counts
                 ·gc.time:                         1,000 ms

Iteration   2: 20,636 ns/op
                 ·gc.alloc.rate:                   1967,318 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          2018,076 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     65,654 B/op
                 ·gc.churn.PS_Survivor_Space:      0,165 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms

Iteration   3: 20,766 ns/op
                 ·gc.alloc.rate:                   1953,217 MB/sec
                 ·gc.alloc.rate.norm:              64,003 B/op
                 ·gc.churn.PS_Eden_Space:          1938,329 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63,515 B/op
                 ·gc.churn.PS_Survivor_Space:      0,290 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
                 ·gc.count:                        6,000 counts
                 ·gc.time:                         2,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray":
  20,710 ±(99.9%) 1,218 ns/op [Average]
  (min, avg, max) = (20,636, 20,710, 20,766), stdev = 0,067
  CI (99.9%): [19,492, 21,927] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate":
  1959,967 ±(99.9%) 128,977 MB/sec [Average]
  (min, avg, max) = (1953,217, 1959,967, 1967,318), stdev = 7,070
  CI (99.9%): [1830,989, 2088,944] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate.norm":
  64,003 ±(99.9%) 0,005 B/op [Average]
  (min, avg, max) = (64,003, 64,003, 64,003), stdev = 0,001
  CI (99.9%): [63,998, 64,008] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space":
  1971,851 ±(99.9%) 754,624 MB/sec [Average]
  (min, avg, max) = (1938,329, 1971,851, 2018,076), stdev = 41,363
  CI (99.9%): [1217,227, 2726,475] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space.norm":
  64,388 ±(99.9%) 20,471 B/op [Average]
  (min, avg, max) = (63,515, 64,388, 65,654), stdev = 1,122
  CI (99.9%): [43,918, 84,859] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space":
  0,235 ±(99.9%) 1,158 MB/sec [Average]
  (min, avg, max) = (0,165, 0,235, 0,290), stdev = 0,063
  CI (99.9%): [≈ 0, 1,393] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space.norm":
  0,008 ±(99.9%) 0,038 B/op [Average]
  (min, avg, max) = (0,005, 0,008, 0,010), stdev = 0,002
  CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.count":
  15,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (4,000, 5,000, 6,000), stdev = 1,000
  CI (99.9%): [15,000, 15,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.time":
  5,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (1,000, 1,667, 2,000), stdev = 0,577
  CI (99.9%): [5,000, 5,000] (assumes normal distribution)


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt     Score      Error   Units
AdapterBenchmark.plainSize:·gc.alloc.rate                                      avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.plainSize:·gc.alloc.rate.norm                                 avgt    3    ≈ 10⁻⁶               B/op
AdapterBenchmark.classAdapterSize:·gc.alloc.rate                               avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm                          avgt    3    ≈ 10⁻⁶               B/op
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate                              avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm                         avgt    3    ≈ 10⁻⁶               B/op
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate                       avgt    3    ≈ 10⁻⁴             MB/sec
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm                  avgt    3    ≈ 10⁻⁵               B/op
AdapterBenchmark.plainToArray:·gc.alloc.rate                                   avgt    3  1959,967 ±  128,977  MB/sec
AdapterBenchmark.plainToArray:·gc.alloc.rate.norm                              avgt    3    64,003 ±    0,005    B/op
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate                            avgt    3  1825,979 ±  307,811  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm                       avgt    3    64,011 ±    0,091    B/op
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate                           avgt    3  1861,567 ±  360,852  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm                      avgt    3    64,003 ±    0,001    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate                    avgt    3  1483,086 ±  214,035  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm               avgt    3    80,010 ±    0,059    B/op
AdapterBenchmark.plainForEach:·gc.alloc.rate                                   avgt    3  1099,882 ±  151,110  MB/sec
AdapterBenchmark.plainForEach:·gc.alloc.rate.norm                              avgt    3    32,010 ±    0,059    B/op
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate                            avgt    3  1141,026 ±  104,300  MB/sec
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm                       avgt    3    32,010 ±    0,061    B/op
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate                           avgt    3  1061,366 ±   58,013  MB/sec
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm                      avgt    3    32,009 ±    0,052    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate                    avgt    3   862,369 ±   35,725  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm               avgt    3    56,025 ±    0,120    B/op


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach

# Run progress: 0,00% complete, ETA 00:27:00
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
15,492 ns/op
# Warmup Iteration   2: 15,703 ns/op
# Warmup Iteration   3: 15,486 ns/op
# Warmup Iteration   4: 15,537 ns/op
# Warmup Iteration   5: 15,473 ns/op
Iteration   1: 15,552 ns/op
Iteration   2: 15,503 ns/op
Iteration   3: 15,535 ns/op
Iteration   4: 15,506 ns/op
Iteration   5: 15,583 ns/op
Iteration   6: 15,557 ns/op
Iteration   7: 15,477 ns/op
Iteration   8: 15,529 ns/op
Iteration   9: 15,584 ns/op
Iteration  10: 15,490 ns/op

# Run progress: 2,78% complete, ETA 00:26:25
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
15,437 ns/op
# Warmup Iteration   2: 15,911 ns/op
# Warmup Iteration   3: 15,520 ns/op
# Warmup Iteration   4: 15,572 ns/op
# Warmup Iteration   5: 15,504 ns/op
Iteration   1: 15,633 ns/op
Iteration   2: 15,453 ns/op
Iteration   3: 15,455 ns/op
Iteration   4: 15,556 ns/op
Iteration   5: 15,582 ns/op
Iteration   6: 15,435 ns/op
Iteration   7: 15,515 ns/op
Iteration   8: 15,556 ns/op
Iteration   9: 15,536 ns/op
Iteration  10: 15,490 ns/op

# Run progress: 5,56% complete, ETA 00:25:43
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
15,462 ns/op
# Warmup Iteration   2: 15,628 ns/op
# Warmup Iteration   3: 15,495 ns/op
# Warmup Iteration   4: 15,464 ns/op
# Warmup Iteration   5: 15,492 ns/op
Iteration   1: 15,443 ns/op
Iteration   2: 15,542 ns/op
Iteration   3: 15,756 ns/op
Iteration   4: 15,581 ns/op
Iteration   5: 15,469 ns/op
Iteration   6: 15,593 ns/op
Iteration   7: 15,520 ns/op
Iteration   8: 15,505 ns/op
Iteration   9: 15,480 ns/op
Iteration  10: 15,519 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach":
  15,531 ±(99.9%) 0,043 ns/op [Average]
  (min, avg, max) = (15,435, 15,531, 15,756), stdev = 0,065
  CI (99.9%): [15,488, 15,574] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize

# Run progress: 8,33% complete, ETA 00:24:57
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,688 ns/op
# Warmup Iteration   2: 3,423 ns/op
# Warmup Iteration   3: 3,400 ns/op
# Warmup Iteration   4: 3,418 ns/op
# Warmup Iteration   5: 3,395 ns/op
Iteration   1: 3,426 ns/op
Iteration   2: 3,375 ns/op
Iteration   3: 3,414 ns/op
Iteration   4: 3,429 ns/op
Iteration   5: 3,423 ns/op
Iteration   6: 3,406 ns/op
Iteration   7: 3,426 ns/op
Iteration   8: 3,380 ns/op
Iteration   9: 3,386 ns/op
Iteration  10: 3,364 ns/op

# Run progress: 11,11% complete, ETA 00:24:11
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,504 ns/op
# Warmup Iteration   2: 3,440 ns/op
# Warmup Iteration   3: 3,406 ns/op
# Warmup Iteration   4: 3,406 ns/op
# Warmup Iteration   5: 3,434 ns/op
Iteration   1: 3,512 ns/op
Iteration   2: 3,501 ns/op
Iteration   3: 3,524 ns/op
Iteration   4: 3,521 ns/op
Iteration   5: 3,441 ns/op
Iteration   6: 3,532 ns/op
Iteration   7: 3,492 ns/op
Iteration   8: 3,511 ns/op
Iteration   9: 3,468 ns/op
Iteration  10: 3,588 ns/op

# Run progress: 13,89% complete, ETA 00:23:27
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,533 ns/op
# Warmup Iteration   2: 3,719 ns/op
# Warmup Iteration   3: 3,500 ns/op
# Warmup Iteration   4: 3,463 ns/op
# Warmup Iteration   5: 3,566 ns/op
Iteration   1: 3,482 ns/op
Iteration   2: 3,473 ns/op
Iteration   3: 3,570 ns/op
Iteration   4: 3,478 ns/op
Iteration   5: 3,493 ns/op
Iteration   6: 3,537 ns/op
Iteration   7: 3,505 ns/op
Iteration   8: 3,456 ns/op
Iteration   9: 3,562 ns/op
Iteration  10: 3,499 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize":
  3,473 ±(99.9%) 0,040 ns/op [Average]
  (min, avg, max) = (3,364, 3,473, 3,588), stdev = 0,060
  CI (99.9%): [3,432, 3,513] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray

# Run progress: 16,67% complete, ETA 00:22:41
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,805 ns/op
# Warmup Iteration   2: 22,843 ns/op
# Warmup Iteration   3: 22,461 ns/op
# Warmup Iteration   4: 22,458 ns/op
# Warmup Iteration   5: 22,299 ns/op
Iteration   1: 22,632 ns/op
Iteration   2: 22,135 ns/op
Iteration   3: 22,216 ns/op
Iteration   4: 22,229 ns/op
Iteration   5: 22,173 ns/op
Iteration   6: 22,236 ns/op
Iteration   7: 22,219 ns/op
Iteration   8: 22,200 ns/op
Iteration   9: 22,260 ns/op
Iteration  10: 22,220 ns/op

# Run progress: 19,44% complete, ETA 00:21:55
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
23,717 ns/op
# Warmup Iteration   2: 22,258 ns/op
# Warmup Iteration   3: 22,248 ns/op
# Warmup Iteration   4: 22,326 ns/op
# Warmup Iteration   5: 22,406 ns/op
Iteration   1: 22,246 ns/op
Iteration   2: 22,639 ns/op
Iteration   3: 22,579 ns/op
Iteration   4: 22,668 ns/op
Iteration   5: 22,341 ns/op
Iteration   6: 22,505 ns/op
Iteration   7: 22,480 ns/op
Iteration   8: 22,614 ns/op
Iteration   9: 22,446 ns/op
Iteration  10: 22,418 ns/op

# Run progress: 22,22% complete, ETA 00:21:11
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
23,696 ns/op
# Warmup Iteration   2: 22,222 ns/op
# Warmup Iteration   3: 22,412 ns/op
# Warmup Iteration   4: 22,549 ns/op
# Warmup Iteration   5: 22,398 ns/op
Iteration   1: 22,368 ns/op
Iteration   2: 22,541 ns/op
Iteration   3: 22,535 ns/op
Iteration   4: 22,361 ns/op
Iteration   5: 22,498 ns/op
Iteration   6: 22,384 ns/op
Iteration   7: 22,396 ns/op
Iteration   8: 22,321 ns/op
Iteration   9: 22,348 ns/op
Iteration  10: 22,329 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray":
  22,385 ±(99.9%) 0,104 ns/op [Average]
  (min, avg, max) = (22,135, 22,385, 22,668), stdev = 0,156
  CI (99.9%): [22,281, 22,489] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach

# Run progress: 25,00% complete, ETA 00:20:25
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
43,051 ns/op
# Warmup Iteration   2: 41,941 ns/op
# Warmup Iteration   3: 41,686 ns/op
# Warmup Iteration   4: 41,369 ns/op
# Warmup Iteration   5: 41,550 ns/op
Iteration   1: 41,706 ns/op
Iteration   2: 41,849 ns/op
Iteration   3: 42,417 ns/op
Iteration   4: 41,920 ns/op
Iteration   5: 41,952 ns/op
Iteration   6: 42,727 ns/op
Iteration   7: 42,101 ns/op
Iteration   8: 42,868 ns/op
Iteration   9: 42,199 ns/op
Iteration  10: 41,920 ns/op

# Run progress: 27,78% complete, ETA 00:19:39
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
43,566 ns/op
# Warmup Iteration   2: 42,984 ns/op
# Warmup Iteration   3: 42,689 ns/op
# Warmup Iteration   4: 42,448 ns/op
# Warmup Iteration   5: 42,512 ns/op
Iteration   1: 43,043 ns/op
Iteration   2: 42,823 ns/op
Iteration   3: 42,368 ns/op
Iteration   4: 42,203 ns/op
Iteration   5: 42,816 ns/op
Iteration   6: 42,276 ns/op
Iteration   7: 42,228 ns/op
Iteration   8: 41,765 ns/op
Iteration   9: 42,783 ns/op
Iteration  10: 42,010 ns/op

# Run progress: 30,56% complete, ETA 00:18:54
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
43,860 ns/op
# Warmup Iteration   2: 42,504 ns/op
# Warmup Iteration   3: 42,707 ns/op
# Warmup Iteration   4: 42,773 ns/op
# Warmup Iteration   5: 42,806 ns/op
Iteration   1: 42,643 ns/op
Iteration   2: 42,637 ns/op
Iteration   3: 42,497 ns/op
Iteration   4: 42,640 ns/op
Iteration   5: 42,628 ns/op
Iteration   6: 42,764 ns/op
Iteration   7: 42,739 ns/op
Iteration   8: 42,957 ns/op
Iteration   9: 42,634 ns/op
Iteration  10: 42,823 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach":
  42,431 ±(99.9%) 0,262 ns/op [Average]
  (min, avg, max) = (41,706, 42,431, 43,043), stdev = 0,392
  CI (99.9%): [42,169, 42,693] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize

# Run progress: 33,33% complete, ETA 00:18:09
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,025 ns/op
# Warmup Iteration   2: 13,440 ns/op
# Warmup Iteration   3: 14,645 ns/op
# Warmup Iteration   4: 14,585 ns/op
# Warmup Iteration   5: 14,616 ns/op
Iteration   1: 14,651 ns/op
Iteration   2: 14,428 ns/op
Iteration   3: 14,609 ns/op
Iteration   4: 14,829 ns/op
Iteration   5: 14,513 ns/op
Iteration   6: 14,740 ns/op
Iteration   7: 14,622 ns/op
Iteration   8: 14,677 ns/op
Iteration   9: 14,461 ns/op
Iteration  10: 14,744 ns/op

# Run progress: 36,11% complete, ETA 00:17:23
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
14,085 ns/op
# Warmup Iteration   2: 14,184 ns/op
# Warmup Iteration   3: 14,049 ns/op
# Warmup Iteration   4: 14,170 ns/op
# Warmup Iteration   5: 14,212 ns/op
Iteration   1: 14,370 ns/op
Iteration   2: 14,186 ns/op
Iteration   3: 14,099 ns/op
Iteration   4: 14,146 ns/op
Iteration   5: 14,134 ns/op
Iteration   6: 14,604 ns/op
Iteration   7: 14,322 ns/op
Iteration   8: 14,042 ns/op
Iteration   9: 14,094 ns/op
Iteration  10: 13,996 ns/op

# Run progress: 38,89% complete, ETA 00:16:38
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
13,881 ns/op
# Warmup Iteration   2: 14,278 ns/op
# Warmup Iteration   3: 14,339 ns/op
# Warmup Iteration   4: 14,119 ns/op
# Warmup Iteration   5: 14,236 ns/op
Iteration   1: 14,340 ns/op
Iteration   2: 14,291 ns/op
Iteration   3: 14,318 ns/op
Iteration   4: 14,499 ns/op
Iteration   5: 14,297 ns/op
Iteration   6: 14,336 ns/op
Iteration   7: 14,172 ns/op
Iteration   8: 14,365 ns/op
Iteration   9: 14,236 ns/op
Iteration  10: 14,231 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize":
  14,378 ±(99.9%) 0,153 ns/op [Average]
  (min, avg, max) = (13,996, 14,378, 14,829), stdev = 0,229
  CI (99.9%): [14,226, 14,531] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray

# Run progress: 41,67% complete, ETA 00:15:53
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
31,943 ns/op
# Warmup Iteration   2: 29,593 ns/op
# Warmup Iteration   3: 29,221 ns/op
# Warmup Iteration   4: 28,927 ns/op
# Warmup Iteration   5: 28,864 ns/op
Iteration   1: 29,239 ns/op
Iteration   2: 28,513 ns/op
Iteration   3: 28,418 ns/op
Iteration   4: 28,367 ns/op
Iteration   5: 28,499 ns/op
Iteration   6: 28,706 ns/op
Iteration   7: 28,859 ns/op
Iteration   8: 28,521 ns/op
Iteration   9: 28,611 ns/op
Iteration  10: 28,524 ns/op

# Run progress: 44,44% complete, ETA 00:15:07
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
31,085 ns/op
# Warmup Iteration   2: 28,737 ns/op
# Warmup Iteration   3: 28,231 ns/op
# Warmup Iteration   4: 28,211 ns/op
# Warmup Iteration   5: 28,256 ns/op
Iteration   1: 28,200 ns/op
Iteration   2: 28,276 ns/op
Iteration   3: 28,270 ns/op
Iteration   4: 28,830 ns/op
Iteration   5: 28,134 ns/op
Iteration   6: 28,287 ns/op
Iteration   7: 28,257 ns/op
Iteration   8: 28,204 ns/op
Iteration   9: 29,525 ns/op
Iteration  10: 28,400 ns/op

# Run progress: 47,22% complete, ETA 00:14:22
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
31,354 ns/op
# Warmup Iteration   2: 29,171 ns/op
# Warmup Iteration   3: 28,196 ns/op
# Warmup Iteration   4: 28,378 ns/op
# Warmup Iteration   5: 28,180 ns/op
Iteration   1: 28,335 ns/op
Iteration   2: 28,334 ns/op
Iteration   3: 28,226 ns/op
Iteration   4: 28,169 ns/op
Iteration   5: 28,250 ns/op
Iteration   6: 28,518 ns/op
Iteration   7: 28,460 ns/op
Iteration   8: 28,281 ns/op
Iteration   9: 28,366 ns/op
Iteration  10: 28,247 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray":
  28,461 ±(99.9%) 0,209 ns/op [Average]
  (min, avg, max) = (28,134, 28,461, 29,525), stdev = 0,312
  CI (99.9%): [28,252, 28,670] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach

# Run progress: 50,00% complete, ETA 00:13:37
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
16,743 ns/op
# Warmup Iteration   2: 17,028 ns/op
# Warmup Iteration   3: 16,729 ns/op
# Warmup Iteration   4: 16,686 ns/op
# Warmup Iteration   5: 16,800 ns/op
Iteration   1: 16,720 ns/op
Iteration   2: 16,830 ns/op
Iteration   3: 16,706 ns/op
Iteration   4: 16,787 ns/op
Iteration   5: 16,700 ns/op
Iteration   6: 16,785 ns/op
Iteration   7: 16,677 ns/op
Iteration   8: 16,755 ns/op
Iteration   9: 16,674 ns/op
Iteration  10: 16,746 ns/op

# Run progress: 52,78% complete, ETA 00:12:51
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
16,645 ns/op
# Warmup Iteration   2: 16,950 ns/op
# Warmup Iteration   3: 16,888 ns/op
# Warmup Iteration   4: 16,750 ns/op
# Warmup Iteration   5: 16,744 ns/op
Iteration   1: 16,853 ns/op
Iteration   2: 16,752 ns/op
Iteration   3: 16,742 ns/op
Iteration   4: 16,762 ns/op
Iteration   5: 16,834 ns/op
Iteration   6: 16,853 ns/op
Iteration   7: 16,760 ns/op
Iteration   8: 16,844 ns/op
Iteration   9: 16,809 ns/op
Iteration  10: 16,775 ns/op

# Run progress: 55,56% complete, ETA 00:12:06
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
16,735 ns/op
# Warmup Iteration   2: 16,883 ns/op
# Warmup Iteration   3: 16,722 ns/op
# Warmup Iteration   4: 16,735 ns/op
# Warmup Iteration   5: 17,455 ns/op
Iteration   1: 17,003 ns/op
Iteration   2: 16,764 ns/op
Iteration   3: 16,835 ns/op
Iteration   4: 16,698 ns/op
Iteration   5: 16,701 ns/op
Iteration   6: 16,788 ns/op
Iteration   7: 16,705 ns/op
Iteration   8: 16,706 ns/op
Iteration   9: 16,758 ns/op
Iteration  10: 16,716 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach":
  16,768 ±(99.9%) 0,047 ns/op [Average]
  (min, avg, max) = (16,674, 16,768, 17,003), stdev = 0,070
  CI (99.9%): [16,721, 16,814] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize

# Run progress: 58,33% complete, ETA 00:11:20
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,942 ns/op
# Warmup Iteration   2: 3,909 ns/op
# Warmup Iteration   3: 3,447 ns/op
# Warmup Iteration   4: 3,439 ns/op
# Warmup Iteration   5: 3,444 ns/op
Iteration   1: 3,583 ns/op
Iteration   2: 3,404 ns/op
Iteration   3: 3,470 ns/op
Iteration   4: 3,446 ns/op
Iteration   5: 3,473 ns/op
Iteration   6: 3,434 ns/op
Iteration   7: 3,446 ns/op
Iteration   8: 3,441 ns/op
Iteration   9: 3,458 ns/op
Iteration  10: 3,426 ns/op

# Run progress: 61,11% complete, ETA 00:10:35
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4,271 ns/op
# Warmup Iteration   2: 3,965 ns/op
# Warmup Iteration   3: 3,434 ns/op
# Warmup Iteration   4: 3,484 ns/op
# Warmup Iteration   5: 3,458 ns/op
Iteration   1: 3,468 ns/op
Iteration   2: 3,467 ns/op
Iteration   3: 3,428 ns/op
Iteration   4: 3,450 ns/op
Iteration   5: 3,439 ns/op
Iteration   6: 3,580 ns/op
Iteration   7: 3,514 ns/op
Iteration   8: 3,467 ns/op
Iteration   9: 3,607 ns/op
Iteration  10: 3,437 ns/op

# Run progress: 63,89% complete, ETA 00:09:50
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4,016 ns/op
# Warmup Iteration   2: 4,056 ns/op
# Warmup Iteration   3: 3,465 ns/op
# Warmup Iteration   4: 3,458 ns/op
# Warmup Iteration   5: 3,539 ns/op
Iteration   1: 3,450 ns/op
Iteration   2: 3,564 ns/op
Iteration   3: 3,527 ns/op
Iteration   4: 3,584 ns/op
Iteration   5: 3,453 ns/op
Iteration   6: 3,540 ns/op
Iteration   7: 3,598 ns/op
Iteration   8: 3,548 ns/op
Iteration   9: 3,397 ns/op
Iteration  10: 3,560 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize":
  3,489 ±(99.9%) 0,042 ns/op [Average]
  (min, avg, max) = (3,397, 3,489, 3,607), stdev = 0,063
  CI (99.9%): [3,446, 3,531] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray

# Run progress: 66,67% complete, ETA 00:09:04
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,249 ns/op
# Warmup Iteration   2: 22,168 ns/op
# Warmup Iteration   3: 22,695 ns/op
# Warmup Iteration   4: 21,856 ns/op
# Warmup Iteration   5: 22,391 ns/op
Iteration   1: 21,973 ns/op
Iteration   2: 21,784 ns/op
Iteration   3: 21,794 ns/op
Iteration   4: 21,763 ns/op
Iteration   5: 22,059 ns/op
Iteration   6: 21,769 ns/op
Iteration   7: 21,729 ns/op
Iteration   8: 21,821 ns/op
Iteration   9: 21,917 ns/op
Iteration  10: 21,822 ns/op

# Run progress: 69,44% complete, ETA 00:08:19
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24,275 ns/op
# Warmup Iteration   2: 22,774 ns/op
# Warmup Iteration   3: 22,150 ns/op
# Warmup Iteration   4: 22,045 ns/op
# Warmup Iteration   5: 22,209 ns/op
Iteration   1: 22,230 ns/op
Iteration   2: 22,193 ns/op
Iteration   3: 22,457 ns/op
Iteration   4: 22,534 ns/op
Iteration   5: 22,457 ns/op
Iteration   6: 22,418 ns/op
Iteration   7: 22,618 ns/op
Iteration   8: 22,357 ns/op
Iteration   9: 22,399 ns/op
Iteration  10: 22,414 ns/op

# Run progress: 72,22% complete, ETA 00:07:34
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
23,919 ns/op
# Warmup Iteration   2: 22,274 ns/op
# Warmup Iteration   3: 22,462 ns/op
# Warmup Iteration   4: 22,080 ns/op
# Warmup Iteration   5: 22,468 ns/op
Iteration   1: 22,291 ns/op
Iteration   2: 22,257 ns/op
Iteration   3: 22,209 ns/op
Iteration   4: 22,172 ns/op
Iteration   5: 22,173 ns/op
Iteration   6: 22,466 ns/op
Iteration   7: 22,118 ns/op
Iteration   8: 22,167 ns/op
Iteration   9: 21,967 ns/op
Iteration  10: 22,227 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray":
  22,152 ±(99.9%) 0,177 ns/op [Average]
  (min, avg, max) = (21,729, 22,152, 22,618), stdev = 0,264
  CI (99.9%): [21,975, 22,328] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach

# Run progress: 75,00% complete, ETA 00:06:48
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
15,645 ns/op
# Warmup Iteration   2: 14,776 ns/op
# Warmup Iteration   3: 15,434 ns/op
# Warmup Iteration   4: 15,415 ns/op
# Warmup Iteration   5: 15,462 ns/op
Iteration   1: 15,561 ns/op
Iteration   2: 15,351 ns/op
Iteration   3: 15,387 ns/op
Iteration   4: 15,490 ns/op
Iteration   5: 15,436 ns/op
Iteration   6: 15,381 ns/op
Iteration   7: 15,467 ns/op
Iteration   8: 15,390 ns/op
Iteration   9: 15,400 ns/op
Iteration  10: 15,505 ns/op

# Run progress: 77,78% complete, ETA 00:06:03
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
16,552 ns/op
# Warmup Iteration   2: 14,543 ns/op
# Warmup Iteration   3: 15,413 ns/op
# Warmup Iteration   4: 15,459 ns/op
# Warmup Iteration   5: 15,386 ns/op
Iteration   1: 15,424 ns/op
Iteration   2: 15,503 ns/op
Iteration   3: 15,365 ns/op
Iteration   4: 15,375 ns/op
Iteration   5: 15,453 ns/op
Iteration   6: 15,368 ns/op
Iteration   7: 15,360 ns/op
Iteration   8: 15,385 ns/op
Iteration   9: 15,411 ns/op
Iteration  10: 15,760 ns/op

# Run progress: 80,56% complete, ETA 00:05:17
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
15,702 ns/op
# Warmup Iteration   2: 14,469 ns/op
# Warmup Iteration   3: 15,406 ns/op
# Warmup Iteration   4: 15,309 ns/op
# Warmup Iteration   5: 15,487 ns/op
Iteration   1: 15,366 ns/op
Iteration   2: 15,369 ns/op
Iteration   3: 15,352 ns/op
Iteration   4: 15,366 ns/op
Iteration   5: 15,380 ns/op
Iteration   6: 15,428 ns/op
Iteration   7: 15,585 ns/op
Iteration   8: 15,313 ns/op
Iteration   9: 15,306 ns/op
Iteration  10: 15,440 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach":
  15,422 ±(99.9%) 0,062 ns/op [Average]
  (min, avg, max) = (15,306, 15,422, 15,760), stdev = 0,092
  CI (99.9%): [15,361, 15,484] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize

# Run progress: 83,33% complete, ETA 00:04:32
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,399 ns/op
# Warmup Iteration   2: 3,395 ns/op
# Warmup Iteration   3: 3,405 ns/op
# Warmup Iteration   4: 3,337 ns/op
# Warmup Iteration   5: 3,388 ns/op
Iteration   1: 3,405 ns/op
Iteration   2: 3,381 ns/op
Iteration   3: 3,367 ns/op
Iteration   4: 3,369 ns/op
Iteration   5: 3,493 ns/op
Iteration   6: 3,542 ns/op
Iteration   7: 3,377 ns/op
Iteration   8: 3,524 ns/op
Iteration   9: 3,415 ns/op
Iteration  10: 3,403 ns/op

# Run progress: 86,11% complete, ETA 00:03:47
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,450 ns/op
# Warmup Iteration   2: 3,558 ns/op
# Warmup Iteration   3: 3,384 ns/op
# Warmup Iteration   4: 3,510 ns/op
# Warmup Iteration   5: 3,497 ns/op
Iteration   1: 3,486 ns/op
Iteration   2: 3,390 ns/op
Iteration   3: 3,460 ns/op
Iteration   4: 3,488 ns/op
Iteration   5: 3,454 ns/op
Iteration   6: 3,481 ns/op
Iteration   7: 3,502 ns/op
Iteration   8: 3,492 ns/op
Iteration   9: 3,516 ns/op
Iteration  10: 3,421 ns/op

# Run progress: 88,89% complete, ETA 00:03:01
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3,602 ns/op
# Warmup Iteration   2: 3,468 ns/op
# Warmup Iteration   3: 3,647 ns/op
# Warmup Iteration   4: 3,624 ns/op
# Warmup Iteration   5: 3,661 ns/op
Iteration   1: 3,657 ns/op
Iteration   2: 3,605 ns/op
Iteration   3: 3,629 ns/op
Iteration   4: 3,684 ns/op
Iteration   5: 3,688 ns/op
Iteration   6: 3,710 ns/op
Iteration   7: 3,647 ns/op
Iteration   8: 3,594 ns/op
Iteration   9: 3,578 ns/op
Iteration  10: 3,753 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize":
  3,517 ±(99.9%) 0,076 ns/op [Average]
  (min, avg, max) = (3,367, 3,517, 3,753), stdev = 0,113
  CI (99.9%): [3,441, 3,593] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/openjdk-14.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray

# Run progress: 91,67% complete, ETA 00:02:16
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
22,944 ns/op
# Warmup Iteration   2: 19,534 ns/op
# Warmup Iteration   3: 18,661 ns/op
# Warmup Iteration   4: 18,171 ns/op
# Warmup Iteration   5: 18,210 ns/op
Iteration   1: 18,222 ns/op
Iteration   2: 18,220 ns/op
Iteration   3: 18,297 ns/op
Iteration   4: 18,256 ns/op
Iteration   5: 18,272 ns/op
Iteration   6: 18,339 ns/op
Iteration   7: 18,268 ns/op
Iteration   8: 18,212 ns/op
Iteration   9: 18,274 ns/op
Iteration  10: 18,257 ns/op

# Run progress: 94,44% complete, ETA 00:01:30
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21,480 ns/op
# Warmup Iteration   2: 19,576 ns/op
# Warmup Iteration   3: 18,336 ns/op
# Warmup Iteration   4: 18,205 ns/op
# Warmup Iteration   5: 18,288 ns/op
Iteration   1: 18,415 ns/op
Iteration   2: 18,225 ns/op
Iteration   3: 18,280 ns/op
Iteration   4: 18,444 ns/op
Iteration   5: 18,311 ns/op
Iteration   6: 18,356 ns/op
Iteration   7: 18,281 ns/op
Iteration   8: 18,293 ns/op
Iteration   9: 18,307 ns/op
Iteration  10: 18,312 ns/op

# Run progress: 97,22% complete, ETA 00:00:45
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/Users/heinz/Dropbox%20(HIC%20Straws)/heinz/git/hexie/dynamic-proxies-mini-book-infoq/dynamic-proxies-samples/core/target/eu.javaspecialists.books.dynamicproxies-core-1.3.8-SNAPSHOT.jar) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21,440 ns/op
# Warmup Iteration   2: 19,786 ns/op
# Warmup Iteration   3: 18,272 ns/op
# Warmup Iteration   4: 18,361 ns/op
# Warmup Iteration   5: 18,266 ns/op
Iteration   1: 18,249 ns/op
Iteration   2: 18,921 ns/op
Iteration   3: 18,365 ns/op
Iteration   4: 18,666 ns/op
Iteration   5: 18,360 ns/op
Iteration   6: 18,450 ns/op
Iteration   7: 18,436 ns/op
Iteration   8: 18,303 ns/op
Iteration   9: 18,384 ns/op
Iteration  10: 18,384 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray":
  18,345 ±(99.9%) 0,096 ns/op [Average]
  (min, avg, max) = (18,212, 18,345, 18,921), stdev = 0,143
  CI (99.9%): [18,250, 18,441] (assumes normal distribution)


# Run complete. Total time: 00:27:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt   Score   Error  Units
AdapterBenchmark.plainSize                    avgt   30   3,517 ± 0,076  ns/op
AdapterBenchmark.classAdapterSize             avgt   30   3,473 ± 0,040  ns/op
AdapterBenchmark.objectAdapterSize            avgt   30   3,489 ± 0,042  ns/op
AdapterBenchmark.dynamicObjectAdapterSize     avgt   30  14,378 ± 0,153  ns/op
AdapterBenchmark.plainToArray                 avgt   30  18,345 ± 0,096  ns/op
AdapterBenchmark.classAdapterToArray          avgt   30  22,385 ± 0,104  ns/op
AdapterBenchmark.objectAdapterToArray         avgt   30  22,152 ± 0,177  ns/op
AdapterBenchmark.dynamicObjectAdapterToArray  avgt   30  28,461 ± 0,209  ns/op
AdapterBenchmark.plainForEach                 avgt   30  15,422 ± 0,062  ns/op
AdapterBenchmark.classAdapterForEach          avgt   30  15,531 ± 0,043  ns/op
AdapterBenchmark.objectAdapterForEach         avgt   30  16,768 ± 0,047  ns/op
AdapterBenchmark.dynamicObjectAdapterForEach  avgt   30  42,431 ± 0,262  ns/op
